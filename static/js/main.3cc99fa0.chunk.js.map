{"version":3,"sources":["store/ducks/user/contracts/actionTypes.ts","components/Notification.tsx","components/ModalBlock.tsx","store/ducks/user/actionCreators.ts","store/types.ts","store/ducks/user/selectors.ts","pages/SignIn/components/LoginModal.tsx","store/ducks/tweets/contracts/actionTypes.ts","pages/SignIn/components/RegisterModal.tsx","pages/SignIn/index.tsx","utils/formatDate.ts","components/Tweet.tsx","store/ducks/tweets/actionCreators.ts","store/ducks/tweets/contracts/state.ts","store/ducks/tweets/selectors.ts","components/AddTweetForm.tsx","store/ducks/tags/actionCreators.ts","components/SidebarMenu.tsx","pages/Home/theme.tsx","components/SearchTextField.tsx","store/ducks/tweet/contracts/actionTypes.ts","store/ducks/tags/selectors.ts","components/Tags.tsx","components/BackButton.tsx","store/ducks/tweet/selectors.ts","store/ducks/tweet/actionCreators.ts","pages/Home/components/FullTweet.tsx","pages/Home/Home.tsx","core/axios.ts","services/api/authApi.ts","App.tsx","theme.ts","store/ducks/tweets/reducer.ts","store/ducks/tags/reducer.ts","store/ducks/tweet/reducer.ts","store/ducks/user/reducer.ts","store/rootReducer.ts","services/api/tweetsApi.ts","store/ducks/tweets/sagas.ts","services/api/tagsApi.ts","store/ducks/tags/sagas.ts","store/ducks/tweet/sagas.ts","store/ducks/user/sagas.ts","store/saga.ts","store/store.ts","index.tsx"],"names":["UserActionsType","Notification","children","useState","open","setOpen","notificationObj","setNotificationObj","console","log","text","type","Snackbar","autoHideDuration","onClose","Alert","severity","ModalBlock","title","visible","Dialog","aria-labelledby","DialogTitle","id","IconButton","onClick","color","aria-label","style","fontSize","DialogContent","DialogActions","LoadingStatus","setUserData","payload","SET_USER_DATA","setLoadingStatus","SET_LOADING_STATE","selectUserState","state","user","selectUserStatus","status","TweetsActionsType","LoginFormSchema","yup","shape","email","required","password","min","LoginModal","classes","useStylesSignIn","dispatch","useDispatch","openNotification","useRef","loadingStatus","useSelector","useForm","resolver","yupResolver","control","handleSubmit","errors","onSubmit","data","a","FETCH_SIGN_IN","React","useEffect","SUCCESS","current","callback","FormControl","className","loginFormControl","component","fullWidth","FormGroup","row","as","TextField","name","loginSideField","label","InputLabelProps","shrink","variant","defaultValue","helperText","message","error","autoFocus","Button","RegisterModel","makeStyles","theme","wrapper","display","height","blueSide","position","alignItems","justifyContent","backgroundColor","flex","overflow","blueSideBigIcon","left","top","transform","width","blueSideListInfo","listStyle","padding","margin","fontWeight","blueSideListInfoItem","marginBottom","blueSideListInfoIcon","marginRight","loginSide","loginSideTwitterIcon","loginSideWrapper","loginSideTitle","fontWight","marginTop","registerField","spacing","Authorize","visibleModal","setVisibleModal","handleCloseModal","undefined","Typography","gutterBottom","formatDate","date","formatDistance","Date","locale","ruLang","Tweet","_id","createdAt","anchorEl","setAnchorEl","Boolean","history","useHistory","handleClose","tweetWrapper","event","preventDefault","push","Paper","cn","tweetsHeader","tweet","Avatar","tweetAvatar","src","avatarUrl","tweetContent","tweetHeader","fullname","tweetUserName","username","tweetPopupMenu","stopPropagation","currentTarget","Menu","keepMounted","MenuItem","tweetFooter","AddFormState","setTweetsLoadingState","setAddFormState","SET_ADD_FORM_STATE","selectTweetsState","tweets","selectAddFormState","addFormState","selectIsTweetsLoading","loadingState","LOADING","selectIsTweetsLoaded","LOADED","selectTweetsItems","items","TagsActionsType","AddTweetForm","maxRows","setText","textLimitPercent","length","addFormBody","TextareaAutosize","addFormTextarea","placeholder","onChange","e","value","rowsMax","addFormBottom","addFormBottomRight","addFormCircleProgress","CircularProgress","size","thickness","FETCH_ADD_TWEET","disabled","ERROR","SidebarMenu","visibleAddTweet","setVisibleAddTweet","sideMenuList","sideMenuListItem","to","logoIcon","sideMenuListItemIcon","Hidden","smDown","sideMenuListItemLabel","sideMenuTweetButton","useHomeStyles","logo","maxWidth","cursor","palette","primary","main","borderRadius","transition","marginLeft","tweetsWrapper","bottomTop","bottomBottom","borderTop","borderLeft","borderRight","tweetsHeaderUser","tweetsHeaderBackArrow","paddingTop","paddingLeft","textDecoration","grey","positiosn","right","fullTweet","fullTweetText","lineHeight","wordBreak","fullTweetFooter","tweetsCentred","textAlign","rightSide","rightSideBlock","rightSideBlockHeader","rightSideBlockItem","minWidth","addForm","addFormBottomActions","border","outline","fontFamily","resize","addFormBottomLine","SearchTextField","withStyles","root","borderWidth","borderColor","fill","TweetActionsType","setTagsLoadingState","selectTags","tags","selectIsTagsLoaded","selectTagsItems","createSelector","Tags","isLoaded","List","map","item","Fragment","key","ListItem","ListItemText","secondary","count","Divider","BackButton","goBack","selectTweet","selectIsTweetLoading","selectIsTweetLoaded","selectTweetData","setTweet","SET_TWEET_DATA","FullTweet","tweetData","isLoading","useParams","FETCH_TWEET_DATA","format","Home","FETCH_TWEETS","FETCH_TAGS","Container","Grid","container","sm","md","path","exact","inputProps","startadornment","InputAdornment","ListItemAvatar","axios","interceptors","request","use","config","headers","window","localStorage","getItem","AuthApi","postData","post","get","App","checkAuth","replace","createMuiTheme","typography","dark","contrastText","red","A400","background","default","shadows","overrides","MuiButton","textTransform","textPrimary","paddingRight","MuiFilledInput","underline","borderBottomWidth","input","MuiDialog","paper","borderRaduis","MuiDialogActions","mardinBottom","MuiDialogTitle","borderBottom","initialState","NEVER","tweetsReducer","produce","draft","action","SET_TWEETS","ADD_TWEET","splice","tagsReducer","SET_TAGS","tweetReducer","userReducer","rootReducer","combineReducers","TweetsApi","fetchTweetsRequest","fetchAddTweetRequest","tweetsSaga","call","put","takeLatest","TagsApi","then","fetchTagsRequest","tagsSaga","fetchTweetDataRequest","tweetSaga","tweetId","fetchSignInRequest","userSaga","setItem","token","rootSaga","all","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","ReactDOM","render","ThemeProvider","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.3cc99fa0.chunk.js","sourcesContent":["import {Action} from 'redux';\r\nimport {User, UserState} from './state';\r\nimport {LoginFormProps} from '../../../../pages/SignIn/components/LoginModal';\r\nimport {LoadingStatus} from '../../../types';\r\n\r\nexport enum UserActionsType {\r\n    SET_USER_DATA = 'user/SET_USER_DATA',\r\n    SET_LOADING_STATE = 'user/SET_LOADING_STATE',\r\n    FETCH_SIGN_IN = 'user/FETCH_SIGN_IN',\r\n}\r\n\r\nexport interface SetUserDataActionInterface extends Action<UserActionsType> {\r\n    type: UserActionsType.SET_USER_DATA;\r\n    payload: User | undefined;\r\n}\r\nexport interface SetUserLoadingStateActionInterface extends Action<UserActionsType> {\r\n    type: UserActionsType.SET_LOADING_STATE;\r\n    payload: LoadingStatus;\r\n}\r\nexport interface FetchUserDataActionInterface extends Action<UserActionsType> {\r\n    type: UserActionsType.FETCH_SIGN_IN;\r\n    payload: LoginFormProps\r\n}","import React, {useState} from 'react';\r\nimport {Snackbar} from '@material-ui/core';\r\nimport {Alert, Color} from '@material-ui/lab';\r\n\r\ninterface NotificationProps {\r\n    children: (callback: (text: string, type: Color) => void) => React.ReactElement\r\n}\r\n\r\nconst Notification: React.FC<NotificationProps> = ({children}): React.ReactElement => {\r\n    const [open, setOpen] = useState(false);\r\n    const [notificationObj, setNotificationObj] = useState<{text: string, type: Color}>();\r\n\r\n    const openNotification = (text: string, type: Color) => {\r\n        console.log('openNotificatoin');\r\n        setNotificationObj({\r\n            text, type\r\n        })\r\n        setOpen(true);\r\n    }\r\n    console.log(open, notificationObj);\r\n    return (\r\n        <div>\r\n            {children(openNotification)}\r\n            <Snackbar open={open} autoHideDuration={6000} onClose={() => setOpen(false)}>\r\n                <Alert onClose={() => setOpen(false)} severity={notificationObj?.type}>\r\n                    {notificationObj?.text}\r\n                </Alert>\r\n\r\n            </Snackbar>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Notification;","import React from 'react';\r\nimport {\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    IconButton,\r\n} from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport {useStylesSignIn} from '../pages/SignIn';\r\n\r\ninterface ModalBlockProps {\r\n    title?: string\r\n    children: React.ReactNode\r\n    // classes: ReturnType<typeof useStylesSignIn>\r\n    visible?: boolean\r\n    onClose: () => void\r\n}\r\n\r\nconst ModalBlock: React.FC<ModalBlockProps | null> = ({title, children, visible= false, onClose}) => {\r\n    if (!visible)\r\n        return null;\r\n    return (\r\n        <Dialog open={visible} onClose={onClose} aria-labelledby='form-dialog-title'>\r\n            <DialogTitle id='form-dialog-title'>\r\n                <IconButton onClick={onClose}\r\n                            color='secondary'\r\n                            aria-label='close'\r\n                    // className={classes.margin}\r\n                >\r\n                    <CloseIcon style={{ fontSize: 26}} color='primary'/>\r\n                </IconButton>\r\n                {title}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                {children}\r\n            </DialogContent>\r\n            <DialogActions>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\nexport default ModalBlock;","import {User, UserState} from './contracts/state';\r\nimport {\r\n    FetchUserDataActionInterface,\r\n    SetUserDataActionInterface,\r\n    SetUserLoadingStateActionInterface,\r\n    UserActionsType\r\n} from './contracts/actionTypes';\r\nimport {LoginFormProps} from '../../../pages/SignIn/components/LoginModal';\r\n\r\nexport const setUserData = (payload: UserState['data']): SetUserDataActionInterface => ({\r\n    type: UserActionsType.SET_USER_DATA,\r\n    payload\r\n});\r\nexport const setLoadingStatus = (payload: UserState['status']): SetUserLoadingStateActionInterface => ({\r\n    type: UserActionsType.SET_LOADING_STATE,\r\n    payload\r\n});\r\nexport const fetchSignIn = (payload: LoginFormProps): FetchUserDataActionInterface => ({\r\n    type: UserActionsType.FETCH_SIGN_IN,\r\n    payload\r\n});\r\n\r\nexport type UserActions =\r\n    SetUserDataActionInterface\r\n    | SetUserLoadingStateActionInterface","\r\nexport enum LoadingStatus {\r\n    LOADED = 'LOADED',\r\n    LOADING = 'LOADING',\r\n    ERROR = 'ERROR',\r\n    NEVER = 'NEVER',\r\n    SUCCESS = 'SUCCESS',\r\n}","import {UserState} from './contracts/state';\r\nimport {RootState} from '../../store';\r\nimport {createSelector} from 'reselect';\r\n\r\nconst selectUserState = (state: RootState): UserState => state.user;\r\nexport const selectUserData = (state: RootState): UserState['data'] => selectUserState(state).data;\r\nexport const selectUserStatus = (state: RootState): UserState['status'] => selectUserState(state).status;","import React, {useRef} from 'react';\r\nimport {Button, FormControl, FormGroup, TextField} from '@material-ui/core';\r\nimport * as yup from 'yup';\r\nimport {yupResolver} from '@hookform/resolvers/yup';\r\nimport Notification from '../../../components/Notification';\r\n\r\nimport {useStylesSignIn} from '../index';\r\nimport ModalBlock from '../../../components/ModalBlock';\r\nimport {Controller, useForm} from 'react-hook-form';\r\nimport {Color} from '@material-ui/lab';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {fetchSignIn} from '../../../store/ducks/user/actionCreators';\r\nimport {selectUserStatus} from '../../../store/ducks/user/selectors';\r\nimport {LoadingStatus} from '../../../store/types';\r\n\r\ninterface LoginModalProps {\r\n    open: boolean\r\n    onClose: () => void\r\n}\r\n\r\nexport interface LoginFormProps {\r\n    email: string,\r\n    password: string,\r\n}\r\n\r\nconst LoginFormSchema = yup.object().shape({\r\n    email: yup.string().email('Неверная почта').required('Введите почту'),\r\n    password: yup.string().min(6).required('Минимальная длина пароля 6 символов'),\r\n});\r\n\r\nexport const LoginModal: React.FC<LoginModalProps> = ({open, onClose}): React.ReactElement => {\r\n    const classes = useStylesSignIn();\r\n    const dispatch = useDispatch();\r\n    const openNotification = useRef<(text: string, type: Color) => void>(() => {})\r\n    const loadingStatus = useSelector(selectUserStatus);\r\n\r\n    const {control, handleSubmit, errors} = useForm<LoginFormProps>({\r\n        resolver: yupResolver(LoginFormSchema)\r\n    });\r\n    const onSubmit = async (data: LoginFormProps) => {\r\n        dispatch(fetchSignIn(data));\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        if (loadingStatus === LoadingStatus.SUCCESS) {\r\n            openNotification.current('Авторизация успешна', 'success');\r\n            onClose();\r\n        } else {\r\n            openNotification.current('Неверный логин или пароль', 'error');\r\n        }\r\n    }, [loadingStatus])\r\n\r\n    return (\r\n        <Notification>\r\n            {\r\n                callback => {\r\n                    openNotification.current = callback;\r\n                    return (\r\n                        <ModalBlock title='Войти в твиттер'\r\n                                    visible={open}\r\n                                    onClose={onClose}\r\n                        >\r\n                            <form onSubmit={handleSubmit(onSubmit)}>\r\n                                <FormControl className={classes.loginFormControl}\r\n                                             component='fieldset'\r\n                                             fullWidth>\r\n                                    <FormGroup aria-label='position' row>\r\n                                        <Controller as={TextField}\r\n                                                    control={control}\r\n                                                    name='email'\r\n                                                    className={classes.loginSideField}\r\n                                                    id='email'\r\n                                                    label='E-mail'\r\n                                                    InputLabelProps={{\r\n                                                        shrink: true,\r\n                                                    }}\r\n                                                    variant='filled'\r\n                                                    type='email'\r\n                                                    defaultValue=''\r\n                                                    helperText={errors.email?.message}\r\n                                                    error={!!errors.email}\r\n                                                    autoFocus\r\n                                                    fullWidth\r\n                                        />\r\n                                        <Controller as={TextField}\r\n                                                    control={control}\r\n                                                    name='password'\r\n                                                    className={classes.loginSideField}\r\n                                                    id='password'\r\n                                                    label='Пароль'\r\n                                                    InputLabelProps={{\r\n                                                        shrink: true,\r\n                                                    }}\r\n                                                    variant='filled'\r\n                                                    type='password'\r\n                                                    defaultValue=''\r\n                                                    helperText={errors.password?.message}\r\n                                                    error={!!errors.password}\r\n                                                    fullWidth\r\n                                        />\r\n                                        <Button type='submit'\r\n                                                variant='contained'\r\n                                                color='primary'\r\n                                                fullWidth>\r\n                                            Войти\r\n                                        </Button>\r\n                                        <br/>\r\n                                    </FormGroup>\r\n                                </FormControl>\r\n                            </form>\r\n                        </ModalBlock>\r\n                    )\r\n                }\r\n            }\r\n        </Notification>\r\n    );\r\n};\r\n\r\nexport default LoginModal;","import {Action} from 'redux';\r\nimport {AddFormState, Tweet, TweetsState} from './state';\r\nimport {LoadingStatus} from '../../../types';\r\n\r\nexport enum TweetsActionsType {\r\n    SET_TWEETS = 'tweets/SET_TWEETS',\r\n    ADD_TWEET = 'tweets/ADD_TWEET',\r\n    FETCH_ADD_TWEET = 'tweets/FETCH_ADD_TWEET',\r\n    FETCH_TWEETS = 'tweets/FETCH_TWEETS',\r\n    SET_LOADING_STATE = 'tweets/SET_LOADING_STATE',\r\n    SET_ADD_FORM_STATE = 'tweets/SET_ADD_FORM_STATE',\r\n}\r\n\r\nexport interface SetTweetsActionInterface extends Action<TweetsActionsType> {\r\n    type: TweetsActionsType.SET_TWEETS;\r\n    payload: TweetsState['items'];\r\n}\r\nexport interface AddTweetActionInterface extends Action<TweetsActionsType> {\r\n    type: TweetsActionsType.ADD_TWEET;\r\n    payload: Tweet;\r\n}\r\nexport interface FetchAddTweetActionInterface extends Action<TweetsActionsType> {\r\n    type: TweetsActionsType.FETCH_ADD_TWEET;\r\n    payload: string;\r\n}\r\nexport interface FetchTweetsActionInterface extends Action<TweetsActionsType> {\r\n    type: TweetsActionsType.FETCH_TWEETS;\r\n}\r\nexport interface setTweetsLoadingStateActionInterface extends Action<TweetsActionsType> {\r\n    type: TweetsActionsType.SET_LOADING_STATE;\r\n    payload: LoadingStatus;\r\n}\r\nexport interface setAddFormStateActionInterface extends Action<TweetsActionsType> {\r\n    type: TweetsActionsType.SET_ADD_FORM_STATE;\r\n    payload: AddFormState;\r\n}","import React from 'react';\r\nimport {\r\n    Button, FormControl, FormGroup,\r\n    TextField\r\n} from '@material-ui/core';\r\nimport {useStylesSignIn} from '../index';\r\nimport ModalBlock from '../../../components/ModalBlock';\r\n\r\ninterface RegisterModalProps {\r\n    open: boolean\r\n    onClose: () => void\r\n}\r\n\r\nexport const RegisterModel: React.FC<RegisterModalProps> = ({ open, onClose }): React.ReactElement => {\r\n    const classes = useStylesSignIn();\r\n\r\n    return (\r\n        <ModalBlock title='Создайте учетную запись'\r\n                    visible={open}\r\n                    onClose={onClose}\r\n        >\r\n            <FormControl className={classes.loginFormControl}\r\n                         component='fieldset'\r\n                         fullWidth>\r\n                <FormGroup aria-label='position' row>\r\n                    <TextField className={classes.loginSideField}\r\n                               autoFocus\r\n                               id='name'\r\n                               label='Имя'\r\n                               InputLabelProps={{\r\n                                   shrink: true,\r\n                               }}\r\n                               variant='filled'\r\n                               type='name'\r\n                               fullWidth\r\n                    />\r\n                    <TextField className={classes.loginSideField}\r\n                               autoFocus\r\n                               id='email'\r\n                               label='E-mail'\r\n                               InputLabelProps={{\r\n                                   shrink: true,\r\n                               }}\r\n                               variant='filled'\r\n                               type='email'\r\n                               fullWidth\r\n                    />\r\n                    <TextField className={classes.loginSideField}\r\n                               autoFocus\r\n                               id='password'\r\n                               label='Пароль'\r\n                               InputLabelProps={{\r\n                                   shrink: true,\r\n                               }}\r\n                               variant='filled'\r\n                               type='password'\r\n                               fullWidth\r\n                    />\r\n                    <Button onClick={onClose}\r\n                            variant='contained'\r\n                            color='primary'\r\n                            fullWidth>\r\n                        Далее\r\n                    </Button>\r\n                    <br/>\r\n                </FormGroup>\r\n            </FormControl>\r\n        </ModalBlock>\r\n    );\r\n};\r\n\r\nexport default RegisterModel;","import React, {useState} from 'react';\r\nimport {\r\n    Button, DialogTitle, FormControl, FormGroup,\r\n    makeStyles, TextField, Typography\r\n} from '@material-ui/core';\r\nimport TwitterIcon from '@material-ui/icons/Twitter';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport PeopleOutlineIcon from '@material-ui/icons/PeopleOutline';\r\nimport MessageIcon from '@material-ui/icons/ChatBubbleOutline';\r\nimport ModalBlock from '../../components/ModalBlock';\r\nimport LoginModal from './components/LoginModal';\r\nimport RegisterModel from './components/RegisterModal';\r\n\r\nexport const useStylesSignIn = makeStyles(theme => ({\r\n    wrapper: {\r\n        display: 'flex',\r\n        height: '100vh',\r\n    },\r\n    blueSide: {\r\n        position: 'relative',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        backgroundColor: '#71C9F8',\r\n        flex: '0 0 50%',\r\n        overflow: 'hidden',\r\n    },\r\n    blueSideBigIcon: {\r\n        position: 'absolute',\r\n        left: '50%',\r\n        top: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        width: '350%',\r\n        height: '350%',\r\n    },\r\n    blueSideListInfo: {\r\n        position: 'relative',\r\n        listStyle: 'none',\r\n        padding: 0,\r\n        margin: 0,\r\n        width: 380,\r\n        '& h6': {\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            color: 'white',\r\n            fontWeight: 700,\r\n            fontSize: 20,\r\n        }\r\n    },\r\n    blueSideListInfoItem: {\r\n        marginBottom: 40,\r\n    },\r\n    blueSideListInfoIcon: {\r\n        fontSize: 32,\r\n        marginRight: 15,\r\n    },\r\n    loginSide: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        flex: '0 0 50%',\r\n    },\r\n    loginSideTwitterIcon: {\r\n        fontSize: 45,\r\n    },\r\n    loginSideWrapper: {\r\n        width: 380,\r\n    },\r\n    loginSideTitle: {\r\n        fontWight: 700,\r\n        fontSize: 32,\r\n        marginBottom: 60,\r\n        marginTop: 20,\r\n    },\r\n    loginSideField: {\r\n        marginBottom: 18\r\n    },\r\n    registerField: {\r\n        marginBottom: theme.spacing(5),\r\n    },\r\n    loginFormControl: {\r\n        marginBottom: theme.spacing(3),\r\n    }\r\n}));\r\n\r\nexport const Authorize: React.FC = (): React.ReactElement => {\r\n    const [visibleModal, setVisibleModal] = useState<'signIn' | 'signUp'>();\r\n    const classes = useStylesSignIn();\r\n\r\n    const handleClickOpenSignIn = (): void => {\r\n        setVisibleModal('signIn');\r\n    };\r\n\r\n    const handleClickOpenSignUp = (): void => {\r\n        setVisibleModal('signUp');\r\n    };\r\n\r\n    const handleCloseModal = (): void => {\r\n        setVisibleModal(undefined);\r\n    };\r\n    return (\r\n        <div className={classes.wrapper}>\r\n            <section className={classes.blueSide}>\r\n                <TwitterIcon color='primary' className={classes.blueSideBigIcon}/>\r\n                <ul className={classes.blueSideListInfo}>\r\n                    <li className={classes.blueSideListInfoItem}><Typography variant='h6'><SearchIcon\r\n                        className={classes.blueSideListInfoIcon}/>Читайте о том, что вам интересно.</Typography></li>\r\n                    <li className={classes.blueSideListInfoItem}><Typography variant='h6'><PeopleOutlineIcon\r\n                        className={classes.blueSideListInfoIcon}/>Узнайте, о чем говорят в мире.</Typography></li>\r\n                    <li className={classes.blueSideListInfoItem}><Typography variant='h6'><MessageIcon\r\n                        className={classes.blueSideListInfoIcon}/>Присоединяйтесь к общению.</Typography></li>\r\n                </ul>\r\n            </section>\r\n            <section className={classes.loginSide}>\r\n                <div className={classes.loginSideWrapper}>\r\n                    <TwitterIcon color='primary' className={classes.loginSideTwitterIcon}/>\r\n                    <Typography className={classes.loginSideTitle} gutterBottom variant='h4'>\r\n                        Узнайте, что происходит в мире прямо сейчас\r\n                    </Typography>\r\n                    <Typography><b>Присоединяйтесь к Твиттеру прямо сейчас!</b></Typography>\r\n                    <br/>\r\n                    <Button onClick={handleClickOpenSignIn} style={{marginBottom: 20}} variant='contained' color='primary'\r\n                            fullWidth>Зарегистрироваться</Button>\r\n                    <Button onClick={handleClickOpenSignUp} variant='outlined' color='primary' fullWidth>\r\n                        Войти\r\n                    </Button>\r\n                    <LoginModal open={visibleModal === 'signUp'}\r\n                                onClose={handleCloseModal}\r\n                    />\r\n                    <RegisterModel open={visibleModal === 'signIn'}\r\n                                onClose={handleCloseModal}\r\n                    />\r\n\r\n                </div>\r\n            </section>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Authorize;","import ruLang from 'date-fns/locale/ru';\r\nimport {formatDistance} from 'date-fns';\r\n\r\nexport const formatDate = (date: Date): string => {\r\n    return formatDistance(\r\n        date,\r\n        new Date(),\r\n        {locale: ruLang}\r\n    );\r\n}","import React, {useState} from 'react';\r\nimport {Avatar, Grid, IconButton, Menu, MenuItem, Paper, Typography} from '@material-ui/core';\r\nimport CommentIcon from '@material-ui/icons/ChatBubbleOutline';\r\nimport RepeatIcon from '@material-ui/icons/Repeat';\r\nimport LikeIcon from '@material-ui/icons/FavoriteBorder';\r\nimport ReplyIcon from '@material-ui/icons/Reply';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\n\r\nimport cn from 'classnames';\r\nimport {useHomeStyles} from '../pages/Home/theme';\r\nimport {Link, useHistory} from 'react-router-dom';\r\nimport {formatDate} from '../utils/formatDate';\r\n\r\ninterface TweetProps {\r\n    classes: ReturnType<typeof useHomeStyles>,\r\n    _id: string,\r\n    createdAt: string,\r\n    user: {\r\n        fullname: string,\r\n        username: string,\r\n        avatarUrl: string,\r\n    },\r\n    text: string,\r\n}\r\n\r\nconst Tweet: React.FC<TweetProps> = ({classes, _id, user, text, createdAt}): React.ReactElement => {\r\n    const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\r\n    const open = Boolean(anchorEl);\r\n    const history = useHistory();\r\n\r\n    const handleClickTweet = (event: React.MouseEvent<HTMLAnchorElement>): void => {\r\n        event.preventDefault();\r\n        history.push(`/home/tweet/${_id}`);\r\n    };\r\n\r\n    const handleClick = (event: React.MouseEvent<HTMLElement>) => {\r\n        event.stopPropagation();\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <a className={classes.tweetWrapper} onClick={handleClickTweet}>\r\n            <Paper className={cn(classes.tweetsHeader, classes.tweet)} variant='outlined'>\r\n                <Avatar className={classes.tweetAvatar} src={user.avatarUrl}/>\r\n                <div className={classes.tweetContent}>\r\n                    <Typography className={classes.tweetHeader}>\r\n                        <div>\r\n                            <b>{user.fullname}</b>\r\n                            <span\r\n                                className={classes.tweetUserName}>@{user.username}&nbsp;·&nbsp;{formatDate(new Date(createdAt))}</span>\r\n                        </div>\r\n                        <div className={classes.tweetPopupMenu}>\r\n                            <IconButton onClick={handleClick}>\r\n                                <MoreVertIcon/>\r\n                            </IconButton>\r\n                            <Menu id=\"long-menu\"\r\n                                  anchorEl={anchorEl}\r\n                                  keepMounted\r\n                                  open={open}\r\n                                  onClose={handleClose}\r\n                            >\r\n                                <MenuItem onClick={handleClose}>\r\n                                    Редактировать\r\n                                </MenuItem>\r\n                                <MenuItem onClick={handleClose}>\r\n                                    Удалить твит\r\n                                </MenuItem>\r\n                            </Menu>\r\n                        </div>\r\n                    </Typography>\r\n                    <Typography variant='body1' gutterBottom>\r\n                        {text}\r\n                    </Typography>\r\n                    <div className={classes.tweetFooter}>\r\n                        <div className=\"\">\r\n                            <IconButton>\r\n                                <CommentIcon style={{fontSize: 20}}/>\r\n                            </IconButton>\r\n                            <span>1</span>\r\n                        </div>\r\n                        <div className=\"\">\r\n                            <IconButton>\r\n                                <RepeatIcon style={{fontSize: 20}}/>\r\n                            </IconButton>\r\n                        </div>\r\n                        <div className=\"\">\r\n                            <IconButton>\r\n                                <LikeIcon style={{fontSize: 20}}/>\r\n                            </IconButton>\r\n                        </div>\r\n                        <div className=\"\">\r\n                            <IconButton>\r\n                                <ReplyIcon style={{fontSize: 20}}/>\r\n                            </IconButton>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Paper>\r\n        </a>\r\n    );\r\n};\r\n\r\nexport default Tweet;","import {AddFormState, Tweet, TweetsState} from './contracts/state';\r\nimport {Action} from 'redux';\r\nimport {\r\n    AddTweetActionInterface,\r\n    FetchAddTweetActionInterface, FetchTweetsActionInterface, setAddFormStateActionInterface,\r\n    SetTweetsActionInterface, setTweetsLoadingStateActionInterface,\r\n    TweetsActionsType\r\n} from './contracts/actionTypes';\r\nimport {LoadingStatus} from '../../types';\r\n\r\nexport const setTweets = (payload: TweetsState['items']): SetTweetsActionInterface => ({\r\n    type: TweetsActionsType.SET_TWEETS,\r\n    payload\r\n});\r\nexport const addTweet = (payload: Tweet): AddTweetActionInterface => ({\r\n    type: TweetsActionsType.ADD_TWEET,\r\n    payload\r\n});\r\nexport const fetchAddTweet = (payload: string): FetchAddTweetActionInterface => ({\r\n    type: TweetsActionsType.FETCH_ADD_TWEET,\r\n    payload\r\n});\r\nexport const fetchTweets = (): FetchTweetsActionInterface => ({\r\n    type: TweetsActionsType.FETCH_TWEETS\r\n});\r\nexport const setTweetsLoadingState = (payload: LoadingStatus): setTweetsLoadingStateActionInterface => ({\r\n    type: TweetsActionsType.SET_LOADING_STATE,\r\n    payload\r\n});\r\nexport const setAddFormState = (payload: AddFormState): setAddFormStateActionInterface => ({\r\n    type: TweetsActionsType.SET_ADD_FORM_STATE,\r\n    payload\r\n});\r\n\r\nexport type TweetsActions =\r\n    SetTweetsActionInterface\r\n    | AddTweetActionInterface\r\n    | FetchAddTweetActionInterface\r\n    | setTweetsLoadingStateActionInterface\r\n    | setAddFormStateActionInterface\r\n    | FetchTweetsActionInterface;","import {LoadingStatus} from '../../../types';\r\n\r\nexport enum AddFormState {\r\n    LOADING = 'LOADING',\r\n    ERROR = 'ERROR',\r\n    NEVER = 'NEVER',\r\n}\r\n\r\nexport interface Tweet {\r\n    _id: string,\r\n    createdAt: string,\r\n    user: {\r\n        fullname: string,\r\n        username: string,\r\n        avatarUrl: string,\r\n    },\r\n    text: string,\r\n}\r\n\r\nexport interface TweetsState {\r\n    items: Tweet[];\r\n    loadingState: LoadingStatus;\r\n    addFormState: AddFormState;\r\n}","import {AddFormState, TweetsState} from './contracts/state';\r\nimport {RootState} from '../../store';\r\nimport {createSelector} from 'reselect';\r\nimport {LoadingStatus} from '../../types';\r\n\r\nexport const selectTweetsState = (state: RootState): TweetsState => state.tweets;\r\n\r\nexport const selectLoadingState = (state: RootState): LoadingStatus => selectTweetsState(state).loadingState;\r\nexport const selectAddFormState = (state: RootState): AddFormState => selectTweetsState(state).addFormState;\r\n\r\nexport const selectIsTweetsLoading = (state: RootState): boolean =>\r\n    selectTweetsState(state).loadingState === LoadingStatus.LOADING;\r\nexport const selectIsTweetsLoaded = (state: RootState): boolean =>\r\n    selectTweetsState(state).loadingState === LoadingStatus.LOADED;\r\n\r\nexport const selectTweetsItems = (state: RootState) =>\r\n    selectTweetsState(state).items;\r\n","import React, {useState} from 'react';\r\nimport {Avatar, Button, CircularProgress, IconButton, TextareaAutosize} from '@material-ui/core';\r\nimport cn from 'classnames';\r\nimport ImageOutlinedIcon from '@material-ui/icons/ImageOutlined';\r\nimport EmojiIcon from '@material-ui/icons/SentimentSatisfiedOutlined';\r\nimport {useHomeStyles} from '../pages/Home/theme';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {fetchAddTweet} from '../store/ducks/tweets/actionCreators';\r\nimport {selectAddFormState} from '../store/ducks/tweets/selectors';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport {AddFormState} from '../store/ducks/tweets/contracts/state';\r\n\r\ninterface AddTweetFormProps {\r\n    classes: ReturnType<typeof useHomeStyles>,\r\n    maxRows?: number,\r\n}\r\n\r\nconst AddTweetForm: React.FC<AddTweetFormProps> = ({classes, maxRows}): React.ReactElement => {\r\n    const MAX_LENGTH = 280;\r\n    const [text, setText] = useState<string>('');\r\n    const textLimitPercent = text.length / MAX_LENGTH * 100;\r\n    const dispatch = useDispatch();\r\n    const addFormState = useSelector(selectAddFormState);\r\n\r\n    const handleChangeTextarea = (e: React.FormEvent<HTMLTextAreaElement>) => {\r\n        if (e.currentTarget) {\r\n            setText(e.currentTarget.value);\r\n        }\r\n    };\r\n\r\n    const handleClickAddTweet = () => {\r\n        dispatch(fetchAddTweet(text));\r\n    };\r\n\r\n    // useEffect(() => {\r\n    //     if (addFormState === AddFormState.ERROR)\r\n    //         setVisibleNotification(true);\r\n    // }, [addFormState]);\r\n    //\r\n    // const handleCloseNotification = () => {\r\n    //     setVisibleNotification(false);\r\n    // }\r\n\r\n    return (\r\n        <div>\r\n            <div className={classes.addFormBody}>\r\n                <Avatar className={classes.tweetAvatar}\r\n                        src={'https://images.unsplash.com/photo-1558898479-33c0057a5d12?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1050&q=80'}/>\r\n                <TextareaAutosize className={classes.addFormTextarea}\r\n                                  placeholder='Что происходит?'\r\n                                  onChange={handleChangeTextarea}\r\n                                  value={text}\r\n                                  rowsMax={maxRows}\r\n                />\r\n            </div>\r\n            <div className={classes.addFormBottom}>\r\n                <div className={cn(classes.tweetFooter)}>\r\n                    <IconButton color='primary'>\r\n                        <ImageOutlinedIcon style={{fontSize: 26}}/>\r\n                    </IconButton>\r\n                    <IconButton color='primary'>\r\n                        <EmojiIcon style={{fontSize: 26}}/>\r\n                    </IconButton>\r\n                </div>\r\n                <div className={classes.addFormBottomRight}>\r\n                    {!!textLimitPercent &&\r\n                    <>\r\n                        <span>{MAX_LENGTH - text.length > 0 ? MAX_LENGTH - text.length : 0}</span>\r\n                        <div className={classes.addFormCircleProgress}>\r\n                            <CircularProgress variant='static'\r\n                                              size={20}\r\n                                              thickness={4}\r\n                                              value={textLimitPercent > 100 ? 100 : textLimitPercent}\r\n                                              style={textLimitPercent >= 100 ? {color: 'red'} : undefined}\r\n                            />\r\n                            <CircularProgress style={{color: 'rgba(0,0,0,0.1)'}}\r\n                                              variant='static'\r\n                                              size={20}\r\n                                              thickness={4}\r\n                                              value={100}\r\n                            />\r\n                        </div>\r\n                    </>\r\n                    }\r\n                    <Button onClick={handleClickAddTweet}\r\n                            disabled={addFormState === AddFormState.LOADING || !text || textLimitPercent >= 100}\r\n                            color='primary'\r\n                            variant='contained'>\r\n                        {addFormState === AddFormState.LOADING\r\n                            ? <CircularProgress size={16} color='inherit'/>\r\n                            : 'Твитнуть'}\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n            {addFormState === AddFormState.ERROR &&\r\n                <Alert severity='error'>Ошибка при добавлении твита</Alert>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddTweetForm;","import {TagsState} from './contracts/state';\r\nimport {Action} from 'redux';\r\nimport {LoadingStatus} from '../../types';\r\n\r\nexport enum TagsActionsType {\r\n    SET_TAGS = 'tags/SET_TAGS',\r\n    FETCH_TAGS = 'tags/FETCH_TAGS',\r\n    SET_LOADING_STATE = 'tags/SET_LOADING_STATE',\r\n}\r\n\r\nexport interface SetTagsActionInterface extends Action<TagsActionsType> {\r\n    type: TagsActionsType.SET_TAGS;\r\n    payload: TagsState['items'];\r\n}\r\n\r\nexport interface setTagsLoadingStateActionInterface extends Action<TagsActionsType> {\r\n    type: TagsActionsType.SET_LOADING_STATE;\r\n    payload: LoadingStatus;\r\n}\r\n\r\nexport interface FetchTagsActionInterface extends Action<TagsActionsType> {\r\n    type: TagsActionsType.FETCH_TAGS;\r\n}\r\n\r\nexport const setTags = (payload: TagsState['items']): SetTagsActionInterface => ({\r\n    type: TagsActionsType.SET_TAGS,\r\n    payload\r\n});\r\nexport const setTagsLoadingState = (payload: LoadingStatus): setTagsLoadingStateActionInterface => ({\r\n    type: TagsActionsType.SET_LOADING_STATE,\r\n    payload\r\n});\r\nexport const fetchTags = (): FetchTagsActionInterface => ({\r\n    type: TagsActionsType.FETCH_TAGS\r\n});\r\n\r\nexport type TagsActions =\r\n    SetTagsActionInterface\r\n    | setTagsLoadingStateActionInterface\r\n    | FetchTagsActionInterface;","import React, {useState} from 'react';\r\nimport {Button, Hidden, Typography} from '@material-ui/core';\r\nimport TwitterIcon from '@material-ui/icons/Twitter';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport NotificationsIcon from '@material-ui/icons/NotificationsNone';\r\nimport MailIcon from '@material-ui/icons/MailOutline';\r\nimport BookmarkIcon from '@material-ui/icons/BookmarkBorder';\r\nimport ListIcon from '@material-ui/icons/ListAlt';\r\nimport PersonIcon from '@material-ui/icons/PersonOutline';\r\nimport {useHomeStyles} from '../pages/Home/theme';\r\nimport ModalBlock from './ModalBlock';\r\nimport AddTweetForm from './AddTweetForm';\r\nimport {Link} from 'react-router-dom';\r\n\r\n\r\ninterface SidebarMenuProps {\r\n    classes: ReturnType<typeof useHomeStyles>,\r\n}\r\n\r\nconst SidebarMenu: React.FC<SidebarMenuProps> = ({classes}) => {\r\n    const [visibleAddTweet, setVisibleAddTweet] = useState(false);\r\n\r\n    const onClickAddTweet = () => {\r\n        setVisibleAddTweet(true);\r\n    }\r\n    const onCloseAddTweet = () => {\r\n        setVisibleAddTweet(false);\r\n    }\r\n\r\n    return (\r\n        <ul className={classes.sideMenuList}>\r\n            <li className={classes.sideMenuListItem}>\r\n                <Link to='/home'>\r\n                    <div>\r\n                        <TwitterIcon className={classes.logoIcon} color='primary'/>\r\n                    </div>\r\n                </Link>\r\n            </li>\r\n            <li className={classes.sideMenuListItem}>\r\n                <div>\r\n                    <SearchIcon className={classes.sideMenuListItemIcon}/>\r\n                    <Hidden smDown>\r\n                        <Typography className={classes.sideMenuListItemLabel} variant={'h6'}>Поиск</Typography>\r\n                    </Hidden>\r\n                </div>\r\n            </li>\r\n            <li className={classes.sideMenuListItem}>\r\n                <div>\r\n                    <NotificationsIcon className={classes.sideMenuListItemIcon}/>\r\n                    <Hidden smDown>\r\n                        <Typography className={classes.sideMenuListItemLabel}\r\n                                    variant={'h6'}>Уведомления</Typography>\r\n                    </Hidden>\r\n                </div>\r\n            </li>\r\n            <li className={classes.sideMenuListItem}>\r\n                <div>\r\n                    <MailIcon className={classes.sideMenuListItemIcon}/>\r\n                    <Hidden smDown>\r\n                        <Typography className={classes.sideMenuListItemLabel} variant={'h6'}>Сообщения</Typography>\r\n                    </Hidden>\r\n                </div>\r\n            </li>\r\n            <li className={classes.sideMenuListItem}>\r\n                <div>\r\n                    <BookmarkIcon className={classes.sideMenuListItemIcon}/>\r\n                    <Hidden smDown>\r\n                        <Typography className={classes.sideMenuListItemLabel} variant={'h6'}>Закладки</Typography>\r\n                    </Hidden>\r\n                </div>\r\n            </li>\r\n            <li className={classes.sideMenuListItem}>\r\n                <div>\r\n                    <ListIcon className={classes.sideMenuListItemIcon}/>\r\n                    <Hidden smDown>\r\n                        <Typography className={classes.sideMenuListItemLabel} variant={'h6'}>Список</Typography>\r\n                    </Hidden>\r\n                </div>\r\n            </li>\r\n            <li className={classes.sideMenuListItem}>\r\n                <div>\r\n                    <PersonIcon className={classes.sideMenuListItemIcon}/>\r\n                    <Hidden smDown>\r\n                        <Typography className={classes.sideMenuListItemLabel} variant={'h6'}>Профиль</Typography>\r\n                    </Hidden>\r\n                </div>\r\n            </li>\r\n            <li className={classes.sideMenuListItem}>\r\n                <Button onClick={onClickAddTweet}\r\n                        className={classes.sideMenuTweetButton}\r\n                        fullWidth\r\n                        color='primary'\r\n                        variant='contained'>\r\n                    Твитнуть\r\n                </Button>\r\n                <ModalBlock onClose={onCloseAddTweet} visible={visibleAddTweet} title=''>\r\n                    <div style={{width: 550}}>\r\n                        <AddTweetForm maxRows={15} classes={classes}/>\r\n                    </div>\r\n                </ModalBlock>\r\n            </li>\r\n        </ul>\r\n\r\n    );\r\n};\r\n\r\nexport default SidebarMenu;","import {makeStyles} from '@material-ui/core';\r\nimport {grey} from '@material-ui/core/colors';\r\n\r\nexport const useHomeStyles = makeStyles((theme) => ({\r\n    wrapper: {\r\n        height: '100vh',\r\n    },\r\n    logo: {\r\n        margin: '10px 0'\r\n    },\r\n    logoIcon: {\r\n        fontSize: 36,\r\n    },\r\n    sideMenuList: {\r\n        position: 'sticky',\r\n        top: 0,\r\n        listStyle: 'none',\r\n        margin: 0,\r\n        padding: 0,\r\n        maxWidth: 230,\r\n    },\r\n    sideMenuListItem: {\r\n        cursor: 'pointer',\r\n        '&:hover': {\r\n            '& div': {\r\n                backgroundColor: 'rgba(29, 161, 242, 0.1)',\r\n                '& h6': {\r\n                    color: theme.palette.primary.main,\r\n                },\r\n                '& svg': {\r\n                    color: theme.palette.primary.main,\r\n                },\r\n            },\r\n        },\r\n        '& div': {\r\n            display: 'inline-flex',\r\n            alignItems: 'center',\r\n            position: 'relative',\r\n            padding: '0 25px 0 20px',\r\n            borderRadius: 30,\r\n            height: 50,\r\n            marginBottom: 10,\r\n            transition: 'background-color 0.15s ease-in-out',\r\n        }\r\n    },\r\n    sideMenuListItemLabel: {\r\n        fontSize: 20,\r\n        fontWeight: 700,\r\n        marginLeft: 15,\r\n    },\r\n    sideMenuListItemIcon: {\r\n        fontSize: 28,\r\n    },\r\n    sideMenuTweetButton: {\r\n        padding: theme.spacing(3.2),\r\n        marginTop: theme.spacing(2),\r\n    },\r\n    tweetsWrapper: {\r\n        borderRadius: 0,\r\n        height: '100%',\r\n        bottomTop: '0',\r\n        bottomBottom: '0',\r\n    },\r\n    tweetsHeader: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        borderTop: '0',\r\n        borderLeft: '0',\r\n        borderRight: '0',\r\n        borderRadius: 0,\r\n        padding: '10px 15px',\r\n        '& h6': {\r\n            fontWeight: 800,\r\n        },\r\n    },\r\n    tweetsHeaderUser: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n    tweetsHeaderBackArrow: {\r\n        marginRight: 20,\r\n    },\r\n    tweet: {\r\n        display: 'flex',\r\n        alignItems: 'flex-start',\r\n        cursor: 'pointer',\r\n        paddingTop: '15',\r\n        paddingLeft: '20',\r\n        position: 'relative',\r\n        '&:hover': {\r\n            backgroundColor: 'rgb(245, 248,250)',\r\n        }\r\n    },\r\n    tweetWrapper: {\r\n        color: 'inherit',\r\n        textDecoration: 'none',\r\n    },\r\n    tweetAvatar: {\r\n        width: theme.spacing(6.5),\r\n        height: theme.spacing(6.5),\r\n    },\r\n    tweetHeader: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'space-between'\r\n    },\r\n    tweetContent: {\r\n      flex: 1,\r\n    },\r\n    tweetFooter: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        position: 'relative',\r\n        left: -13,\r\n        maxWidth: '450',\r\n    },\r\n    tweetUserName: {\r\n        color: grey[500],\r\n    },\r\n    tweetPopupMenu: {\r\n        positiosn: 'absolute',\r\n        right: 0,\r\n        top: 0\r\n    },\r\n    fullTweet: {\r\n        padding: 22\r\n    },\r\n    fullTweetText: {\r\n        fontSize: 24,\r\n        marginTop: 20,\r\n        lineHeight: 1.3125,\r\n        wordBreak: 'break-word',\r\n    },\r\n    fullTweetFooter: {\r\n\r\n    },\r\n    tweetsCentred: {\r\n        marginTop: 50,\r\n        textAlign: 'center',\r\n    },\r\n    rightSide: {\r\n        paddingTop: 20,\r\n        position: 'sticky',\r\n        top: 0,\r\n    },\r\n    rightSideBlock: {\r\n        backgroundColor: '#F5F8FA',\r\n        borderRadius: 15,\r\n        marginTop: 20,\r\n        '& .MuiList-root': {\r\n            paddingTop: 0,\r\n        },\r\n    },\r\n    rightSideBlockHeader: {\r\n        borderTop: 0,\r\n        borderLeft: 0,\r\n        borderRight: 0,\r\n        backgroundColor: 'transparent',\r\n        padding: '13px 18px',\r\n        '& b': {\r\n            fontSize: 20,\r\n            fontWeight: 800,\r\n        },\r\n    },\r\n    rightSideBlockItem: {\r\n        cursor: 'pointer',\r\n        '& .MuiTypography-body1': {\r\n            fontWeight: 700,\r\n        },\r\n        '& .MuiListItemAvatar-root': {\r\n            minWidth: 50,\r\n        },\r\n        '& .MuiListItemText-root': {\r\n            margin: 0,\r\n        },\r\n        '&:hover': {\r\n            backgroundColor: '#edf3f6',\r\n        },\r\n        '& a': {\r\n            textDecoration: 'none',\r\n            color: 'inherit',\r\n        }\r\n    },\r\n    addForm: {\r\n        padding: 20,\r\n    },\r\n    addFormBody: {\r\n        display: 'flex',\r\n        width: '100%',\r\n    },\r\n    addFormBottom: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n    },\r\n    addFormBottomActions: {\r\n        marginTop: 10,\r\n        paddingLeft: 70,\r\n    },\r\n    addFormTextarea: {\r\n        width: '100%',\r\n        border: 0,\r\n        fontSize: 20,\r\n        outline: 'none',\r\n        fontFamily: 'inherit',\r\n        resize: 'none',\r\n    },\r\n    addFormBottomLine: {\r\n        height: 12,\r\n        backgroundColor: '#e6ecf0',\r\n    },\r\n    addFormCircleProgress: {\r\n        position: 'relative',\r\n        width: 20,\r\n        height: 20,\r\n        margin: '0 10px',\r\n        '& .MuiCircularProgress-root': {\r\n            position: 'absolute',\r\n        },\r\n    },\r\n    addFormBottomRight: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n}));","import React from 'react';\r\nimport {TextField, Theme, withStyles} from '@material-ui/core';\r\nconst SearchTextField = withStyles((theme: Theme) => ({\r\n    root: {\r\n        '& .MuiOutlinedInput-root': {\r\n            borderRadius: 30,\r\n            backgroundColor: '#e6ecf0',\r\n            padding: 0,\r\n            paddingLeft: 15,\r\n            '&.Mui-focused': {\r\n                backgroundColor: '#fff',\r\n                '& fieldset': {\r\n                    borderWidth: 1,\r\n                    borderColor: theme.palette.primary.main,\r\n                },\r\n                '& svg path': {\r\n                    fill: theme.palette.primary.main,\r\n                },\r\n            },\r\n            '&:hover': {\r\n                '& fieldset': {\r\n                    borderColor: 'transparent',\r\n                },\r\n            },\r\n            '& fieldset': {\r\n                borderColor: 'transparent',\r\n                borderWidth: 1,\r\n            },\r\n        },\r\n        '& .MuiOutlinedInput-input': {\r\n            padding: '12px 14px 14px 5px',\r\n        },\r\n    },\r\n}))(TextField);\r\n\r\nexport default SearchTextField;","import {Action} from 'redux';\r\nimport {Tweet} from '../../tweets/contracts/state';\r\nimport {TweetState} from './state';\r\nimport {LoadingStatus} from '../../../types';\r\n\r\nexport enum TweetActionsType {\r\n    SET_TWEET_DATA = 'tweet/SET_DATA',\r\n    FETCH_TWEET_DATA = 'tweet/FETCH_DATA',\r\n    SET_LOADING_STATE = 'tweet/SET_LOADING_STATE',\r\n}\r\nexport interface SetTweetActionInterface extends Action<TweetActionsType> {\r\n    type: TweetActionsType.SET_TWEET_DATA;\r\n    payload: TweetState['data'];\r\n}\r\nexport interface setTweetLoadingStateActionInterface extends Action<TweetActionsType> {\r\n    type: TweetActionsType.SET_LOADING_STATE;\r\n    payload: LoadingStatus;\r\n}\r\nexport interface FetchTweetDataActionInterface extends Action<TweetActionsType> {\r\n    type: TweetActionsType.FETCH_TWEET_DATA;\r\n    payload: string;\r\n}\r\n","import {TagsState} from './contracts/state';\r\nimport {RootState} from '../../store';\r\nimport {createSelector} from 'reselect';\r\nimport {LoadingStatus} from '../../types';\r\n\r\nexport const selectTags = (state: RootState): TagsState => state.tags;\r\nexport const selectLoadingState = (state: RootState): LoadingStatus => selectTags(state).loadingState;\r\nexport const selectIsTagsLoading = (state: RootState): boolean =>\r\n    selectTags(state).loadingState === LoadingStatus.LOADING;\r\nexport const selectIsTagsLoaded = (state: RootState): boolean =>\r\n    selectTags(state).loadingState === LoadingStatus.LOADED;\r\n\r\nexport const selectTagsItems = createSelector(selectTags, (tags) => tags.items);\r\n","import React from 'react';\r\n\r\nimport cn from 'classnames';\r\nimport {useHomeStyles} from '../pages/Home/theme';\r\nimport {Divider, List, ListItem, ListItemText, Paper, Typography} from '@material-ui/core';\r\nimport {useSelector} from 'react-redux';\r\nimport {selectIsTagsLoaded, selectTagsItems} from '../store/ducks/tags/selectors';\r\nimport {Link} from 'react-router-dom';\r\n\r\ninterface TweetProps {\r\n    classes: ReturnType<typeof useHomeStyles>,\r\n}\r\n\r\nconst Tags: React.FC<TweetProps> = ({classes}): React.ReactElement | null => {\r\n    const items = useSelector(selectTagsItems);\r\n    const isLoaded = useSelector(selectIsTagsLoaded);\r\n\r\n    return (\r\n        <Paper className={classes.rightSideBlock}>\r\n            <Paper className={classes.rightSideBlockHeader}>\r\n                <b>Актуальные темы</b>\r\n            </Paper>\r\n            {!isLoaded ? (<div></div>) : (\r\n                <List>\r\n                    {\r\n                        items.map(item =>\r\n                            <React.Fragment key={item._id}>\r\n                                <ListItem className={classes.rightSideBlockItem}>\r\n                                    <Link to={`/home/search?q=${item.name}`}>\r\n                                        <ListItemText primary={item.name} secondary={\r\n                                            <Typography component='span' variant='body2'>\r\n                                                Твитов: {item.count}\r\n                                            </Typography>\r\n                                        }>\r\n                                        </ListItemText>\r\n                                    </Link>\r\n                                </ListItem>\r\n                                <Divider component='li'/>\r\n                            </React.Fragment>\r\n                        )\r\n                    }\r\n                </List>)\r\n            }\r\n        </Paper>\r\n    );\r\n};\r\n\r\nexport default Tags;","import React from 'react';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport {IconButton} from '@material-ui/core';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst BackButton: React.FC = (): React.ReactElement => {\r\n    let history = useHistory();\r\n\r\n    const handleClickButton = () => history.goBack();\r\n\r\n    return (\r\n        <IconButton onClick={handleClickButton} style={{ marginRight: 20 }} color='primary'>\r\n            <ArrowBackIcon />\r\n        </IconButton>\r\n    );\r\n};\r\n\r\nexport default BackButton;","import {TweetState} from './contracts/state';\r\nimport {RootState} from '../../store';\r\nimport {Tweet} from '../tweets/contracts/state';\r\nimport {LoadingStatus} from '../../types';\r\n\r\nexport const selectTweet = (state: RootState): TweetState => state.tweet;\r\nexport const selectLoadingState = (state: RootState): LoadingStatus => selectTweet(state).loadingState;\r\nexport const selectIsTweetLoading = (state: RootState): boolean =>\r\n    selectTweet(state).loadingState === LoadingStatus.LOADING;\r\nexport const selectIsTweetLoaded = (state: RootState): boolean =>\r\n    selectTweet(state).loadingState === LoadingStatus.LOADED;\r\nexport const selectTweetData = (state: RootState): Tweet | undefined => selectTweet(state).data;\r\n","import {TweetState} from './contracts/state';\r\nimport {Tweet} from '../tweets/contracts/state';\r\n\r\nimport {\r\n    FetchTweetDataActionInterface,\r\n    SetTweetActionInterface, setTweetLoadingStateActionInterface,\r\n    TweetActionsType\r\n} from './contracts/actionTypes';\r\nimport {LoadingStatus} from '../../types';\r\n\r\nexport const setTweet = (payload: TweetState['data']): SetTweetActionInterface => ({\r\n    type: TweetActionsType.SET_TWEET_DATA,\r\n    payload\r\n});\r\nexport const setTweetLoadingState = (payload: LoadingStatus): setTweetLoadingStateActionInterface => ({\r\n    type: TweetActionsType.SET_LOADING_STATE,\r\n    payload\r\n});\r\nexport const fetchTweetData = (payload: string): FetchTweetDataActionInterface => ({\r\n    type: TweetActionsType.FETCH_TWEET_DATA,\r\n    payload\r\n});\r\n\r\nexport type TweetActions =\r\n    SetTweetActionInterface\r\n    | setTweetLoadingStateActionInterface\r\n    | FetchTweetDataActionInterface;","import React, {useEffect} from 'react';\r\nimport {useHomeStyles} from '../theme';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {selectIsTweetLoaded, selectIsTweetLoading, selectTweetData} from '../../../store/ducks/tweet/selectors';\r\nimport {useParams} from 'react-router-dom';\r\nimport {fetchTweetData, setTweet} from '../../../store/ducks/tweet/actionCreators';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport cn from 'classnames';\r\nimport {Avatar, Paper, Typography} from '@material-ui/core';\r\nimport {formatDate} from '../../../utils/formatDate';\r\nimport {format} from 'date-fns';\r\nimport ruLang from 'date-fns/locale/ru';\r\n\r\nconst FullTweet: React.FC = (): React.ReactElement | null => {\r\n    const classes = useHomeStyles();\r\n    const dispatch = useDispatch();\r\n    const tweetData = useSelector(selectTweetData);\r\n    const isLoaded = useSelector(selectIsTweetLoaded);\r\n    const isLoading = useSelector(selectIsTweetLoading);\r\n    const params: { id?: string } = useParams();\r\n    const id = params.id;\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            dispatch(fetchTweetData(id));\r\n        }\r\n\r\n        return () => {\r\n            dispatch(setTweet(undefined));\r\n        }\r\n    }, [dispatch, id]);\r\n\r\n    if (!tweetData) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {isLoading\r\n                ? (<div className={classes.tweetsCentred}><CircularProgress/></div>)\r\n                : !isLoaded\r\n                    ? (<div></div>)\r\n                    : (<div>\r\n                        <Paper className={classes.fullTweet}>\r\n                            <div className={cn(classes.tweetsHeaderUser)} >\r\n                                <Avatar className={classes.tweetAvatar} src={tweetData.user.avatarUrl}/>\r\n                                <Typography>\r\n                                    <b>{tweetData.user.fullname}</b>\r\n                                    <span className={classes.tweetUserName}>@{tweetData.user.username}&nbsp;</span>\r\n                                    <span>·&nbsp;{formatDate(new Date(tweetData.createdAt))}</span>\r\n                                </Typography>\r\n                            </div>\r\n                            <Typography className={classes.fullTweetText} variant='body1' gutterBottom>\r\n                                {tweetData.text}\r\n                            </Typography>\r\n                            <Typography>\r\n                                <span className={classes.tweetUserName}>{format(new Date(tweetData.createdAt), 'H:mm', {locale: ruLang})} </span>\r\n                                <span className={classes.tweetUserName}>{format(new Date(tweetData.createdAt), 'dd MMM. yyyy г.', {locale: ruLang})}</span>\r\n                            </Typography>\r\n                            {/*<Typography className={cn(classes.tweetFooter, classes.fullTweetFooter)}>*/}\r\n                            {/*    {tweetData.text}*/}\r\n                            {/*</Typography>*/}\r\n                        </Paper>\r\n                    </div>)\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FullTweet;","import React, {useEffect} from 'react';\r\nimport {\r\n    Grid,\r\n    Paper,\r\n    Typography,\r\n    Container,\r\n    Avatar,\r\n    Button,\r\n    InputAdornment,\r\n    ListItem,\r\n    List,\r\n    ListItemText,\r\n    Divider, ListItemAvatar, IconButton\r\n} from '@material-ui/core';\r\nimport PersonAddIcon from '@material-ui/icons/PersonAddOutlined';\r\nimport SearchIcon from '@material-ui/icons/SearchOutlined';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport cn from 'classnames';\r\n\r\nimport Tweet from '../../components/Tweet';\r\nimport SidebarMenu from '../../components/SidebarMenu';\r\nimport AddTweetForm from '../../components/AddTweetForm';\r\nimport {useHomeStyles} from './theme';\r\nimport SearchTextField from '../../components/SearchTextField';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {fetchTweets} from '../../store/ducks/tweets/actionCreators';\r\nimport {selectIsTweetsLoaded, selectIsTweetsLoading, selectTweetsItems} from '../../store/ducks/tweets/selectors';\r\nimport {fetchTags} from '../../store/ducks/tags/actionCreators';\r\nimport Tags from '../../components/Tags';\r\nimport { Route } from 'react-router-dom';\r\nimport BackButton from '../../components/BackButton';\r\nimport FullTweet from './components/FullTweet';\r\n\r\nconst Home = (): React.ReactElement => {\r\n    const dispatch = useDispatch();\r\n    const classes = useHomeStyles();\r\n    const tweets = useSelector(selectTweetsItems);\r\n    const isLoading = useSelector(selectIsTweetsLoading);\r\n    const isLoaded = useSelector(selectIsTweetsLoaded);\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTweets());\r\n        dispatch(fetchTags());\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <Container className={classes.wrapper} maxWidth='lg'>\r\n            <Grid container spacing={3}>\r\n                <Grid item sm={1} md={3}>\r\n                    <SidebarMenu classes={classes}/>\r\n                </Grid>\r\n                <Grid item sm={8} md={6}>\r\n                    <Paper className={classes.tweetsWrapper} variant='outlined'>\r\n                        <Paper className={classes.tweetsHeader} variant='outlined'>\r\n                            <Route path='/home/:any'>\r\n                                <BackButton/>\r\n                            </Route>\r\n                            <Route path={['/home', '/home/search']} exact>\r\n                                <Typography variant='h6'>Твиты</Typography>\r\n                            </Route>\r\n                            <Route path='/home/tweet'>\r\n                                <Typography variant='h6'>Твитнуть</Typography>\r\n                            </Route>\r\n                        </Paper>\r\n                        <Route path={['/home', '/home/search']} exact>\r\n                            <Paper>\r\n                                <div className={classes.addForm}>\r\n                                    <AddTweetForm classes={classes}/>\r\n                                </div>\r\n                                <div className={classes.addFormBottomLine}/>\r\n                            </Paper>\r\n                        </Route>\r\n                        <Route path='/home/tweet/:id' component={FullTweet} exact/>\r\n                        <Route path='/home' exact>\r\n                            {isLoading\r\n                                ? (<div className={classes.tweetsCentred}><CircularProgress/></div>)\r\n                                : !isLoaded\r\n                                    ? (<div></div>)\r\n                                    : (tweets.map((tweet) =>\r\n                                        <Tweet key={tweet._id}\r\n                                               classes={classes}\r\n                                               {...tweet}\r\n                                        />\r\n                                        ))\r\n                            }\r\n                        </Route>\r\n                    </Paper>\r\n                </Grid>\r\n                <Grid item sm={3}>\r\n                    <div className={classes.rightSide}>\r\n                        <SearchTextField variant='outlined'\r\n                                         placeholder='Поиск в твиттере'\r\n                                         fullWidth\r\n                                         inputProps={{\r\n                                             startadornment: (\r\n                                                 <InputAdornment position='start'>\r\n                                                     <SearchIcon/>\r\n                                                 </InputAdornment>\r\n                                             )\r\n                                         }}\r\n                        />\r\n                        <Tags classes={classes}/>\r\n                        <Paper className={classes.rightSideBlock}>\r\n                            <Paper className={classes.rightSideBlockHeader}>\r\n                                <b>Кого читать</b>\r\n                            </Paper>\r\n                            <List>\r\n                                <ListItem className={classes.rightSideBlockItem}>\r\n                                    <ListItemAvatar>\r\n                                        <Avatar src=''/>\r\n                                    </ListItemAvatar>\r\n                                    <ListItemText primary='Dock Of Shame' secondary={\r\n                                        <Typography component='span' variant='body2'>\r\n                                            @FavDockOfShame\r\n                                        </Typography>\r\n                                    }/>\r\n                                    <Button color='primary'>\r\n                                        <PersonAddIcon/>\r\n                                    </Button>\r\n                                </ListItem>\r\n                                <Divider component='li'/>\r\n                            </List>\r\n                        </Paper>\r\n                    </div>\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default Home;","import axios from 'axios';\r\n\r\naxios.interceptors.request.use((config) => {\r\n    config.headers['token'] = window.localStorage.getItem('token');\r\n    return config;\r\n})\r\n\r\nexport {axios};","import {LoginFormProps} from '../../pages/SignIn/components/LoginModal';\r\nimport {axios} from '../../core/axios';\r\n\r\ninterface ResponseApi {\r\n    status: string,\r\n    data: any,\r\n}\r\n\r\nexport const AuthApi = {\r\n    async signIn(postData: LoginFormProps): Promise<ResponseApi> {\r\n        const {data} = await axios.post<ResponseApi>('/auth/login', {username: postData.email, password: postData.password});\r\n        return data;\r\n    },\r\n    async getMe(): Promise<ResponseApi> {\r\n        const {data} = await axios.get<ResponseApi>('/users/me');\r\n        return data;\r\n    },\r\n}","import React, {useEffect} from 'react';\nimport {Authorize} from './pages/SignIn';\nimport { Route, Switch, useHistory } from 'react-router-dom';\nimport Home from './pages/Home/Home';\nimport {useDispatch} from 'react-redux';\nimport {AuthApi} from './services/api/authApi';\nimport {setUserData} from './store/ducks/user/actionCreators';\n\nfunction App() {\n    const history = useHistory();\n    const dispatch = useDispatch();\n\n    const checkAuth = async () => {\n        try {\n            const {data} = await AuthApi.getMe();\n            dispatch(setUserData(data));\n            history.replace('/home');\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    useEffect(() => {\n        checkAuth();\n    }, [])\n\n  return (\n    <div className=\"App\">\n        <Switch>\n            <Route path='/signIn' component={Authorize}/>\n            <Route path='/' component={Home}/>\n        </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// @ts-nocheck\r\n\r\nimport {createMuiTheme} from '@material-ui/core';\r\nimport { red } from '@material-ui/core/colors'\r\n\r\nexport const theme = createMuiTheme({\r\n    typography: {\r\n        fontFamily: [\r\n            'system-ui',\r\n            '-apple-system',\r\n            'BlinkMacSystemFont',\r\n            'Segoe UI',\r\n            'Roboto',\r\n            'Oxygen',\r\n            'Ubuntu',\r\n            'Cantarell',\r\n            'Fira Sans',\r\n            'Droid Sans',\r\n            'Helvetica Neue',\r\n            'sans-serif',\r\n        ]\r\n    },\r\n    palette: {\r\n        primary: {\r\n            main: 'rgb(29, 161, 242)',\r\n            dark: 'rgb(26, 145, 218)',\r\n            contrastText: '#fff',\r\n        },\r\n        secondary: {\r\n            main: 'rgb(26, 145, 218)',\r\n        },\r\n        error: {\r\n            main: red.A400,\r\n        },\r\n        background: {\r\n            default: '#fff',\r\n        },\r\n        text: {\r\n            primary: '#14171a',\r\n        }\r\n    },\r\n    shadows: [],\r\n    overrides: {\r\n        MuiButton: {\r\n            root: {\r\n                borderRadius: 30,\r\n                textTransform: 'none',\r\n                fontSize: 16,\r\n                height: 40,\r\n                fontWeight: 700,\r\n            },\r\n            textPrimary: {\r\n                paddingLeft: 20,\r\n                paddingRight: 20,\r\n            },\r\n            MuiFilledInput: {\r\n                underline: {\r\n                    '&:after': {\r\n                        borderBottomWidth: '2px',\r\n                    },\r\n                    '&:before': {\r\n                        borderColor: '#000',\r\n                        borderBottomWidth: '2px',\r\n                    },\r\n                },\r\n                input: {\r\n                    background: 'rgb(245, 248, 250)'\r\n                },\r\n                MuiDialog: {\r\n                    paper: {\r\n                        borderRaduis: 15,\r\n                    },\r\n                },\r\n                MuiDialogActions: {\r\n                    root: {\r\n                        mardinBottom: 8,\r\n                    },\r\n                },\r\n                MuiDialogTitle: {\r\n                    root: {\r\n                        borderBottom: '1px solid rgb(204, 230, 240)',\r\n                        marginBottom: 10,\r\n                        padding: '10px 15px', '& h2': {\r\n                            display: 'flex',\r\n                            alignItems: 'center',\r\n                            fontWeight: 800,\r\n                        },\r\n                        '& button': {\r\n                            padding: 8,\r\n                            marginRight: 20,\r\n                        },\r\n                    },\r\n                },\r\n            }\r\n        }\r\n    }\r\n});","import {AddFormState, TweetsState} from './contracts/state';\r\nimport produce, {Draft} from 'immer';\r\nimport {TweetsActions} from './actionCreators';\r\nimport {TweetsActionsType} from './contracts/actionTypes';\r\nimport {LoadingStatus} from '../../types';\r\n\r\nconst initialState: TweetsState = {\r\n    items: [],\r\n    addFormState: AddFormState.NEVER,\r\n    loadingState: LoadingStatus.NEVER,\r\n};\r\n\r\nexport const tweetsReducer = produce((draft: Draft<TweetsState>, action: TweetsActions) => {\r\n    switch (action.type) {\r\n        case TweetsActionsType.SET_TWEETS:\r\n            draft.items = action.payload;\r\n            draft.loadingState = LoadingStatus.LOADED;\r\n            break;\r\n        case TweetsActionsType.ADD_TWEET:\r\n            // draft.items.push(action.payload);\r\n            draft.items.splice(0, 0, action.payload);\r\n            draft.addFormState = AddFormState.NEVER;\r\n            break;\r\n        case TweetsActionsType.FETCH_ADD_TWEET:\r\n            draft.addFormState = AddFormState.LOADING;\r\n            break;\r\n        case TweetsActionsType.FETCH_TWEETS:\r\n            draft.items = [];\r\n            draft.loadingState = LoadingStatus.LOADING;\r\n            break;\r\n        case TweetsActionsType.SET_LOADING_STATE:\r\n            draft.loadingState = action.payload;\r\n            break;\r\n        case TweetsActionsType.SET_ADD_FORM_STATE:\r\n            draft.addFormState = action.payload;\r\n            break;\r\n\r\n    }\r\n}, initialState)","import {TagsState} from './contracts/state';\r\nimport produce, {Draft} from 'immer';\r\nimport {TagsActions, TagsActionsType} from './actionCreators';\r\nimport {LoadingStatus} from '../../types';\r\n\r\nconst initialState: TagsState = {\r\n    items: [],\r\n    loadingState: LoadingStatus.NEVER\r\n};\r\n\r\nexport const tagsReducer = produce((draft: Draft<TagsState>, action: TagsActions) => {\r\n    switch (action.type) {\r\n        case TagsActionsType.SET_TAGS:\r\n            draft.items = action.payload;\r\n            draft.loadingState = LoadingStatus.LOADED;\r\n            break;\r\n        case TagsActionsType.FETCH_TAGS:\r\n            draft.items = [];\r\n            draft.loadingState = LoadingStatus.LOADING;\r\n            break;\r\n        case TagsActionsType.SET_LOADING_STATE:\r\n            draft.loadingState = action.payload;\r\n            break;\r\n    }\r\n}, initialState)","import {TweetState} from './contracts/state';\r\nimport produce, {Draft} from 'immer';\r\nimport {TweetActions} from './actionCreators';\r\nimport {TweetActionsType} from './contracts/actionTypes';\r\nimport {LoadingStatus} from '../../types';\r\n\r\nconst initialState: TweetState = {\r\n    data: undefined,\r\n    loadingState: LoadingStatus.NEVER\r\n};\r\n\r\nexport const tweetReducer = produce((draft: Draft<TweetState>, action: TweetActions) => {\r\n    switch (action.type) {\r\n        case TweetActionsType.SET_TWEET_DATA:\r\n            draft.data = action.payload;\r\n            draft.loadingState = LoadingStatus.LOADED;\r\n            break;\r\n        case TweetActionsType.FETCH_TWEET_DATA:\r\n            draft.data = undefined;\r\n            draft.loadingState = LoadingStatus.LOADING;\r\n            break;\r\n        case TweetActionsType.SET_LOADING_STATE:\r\n            draft.loadingState = action.payload;\r\n            break;\r\n    }\r\n}, initialState)","import { UserState} from './contracts/state';\r\nimport produce, {Draft} from 'immer';\r\nimport {UserActions} from './actionCreators';\r\nimport {UserActionsType} from './contracts/actionTypes';\r\nimport {LoadingStatus} from '../../types';\r\n\r\nconst initialState: UserState = {\r\n    data: undefined,\r\n    status: LoadingStatus.NEVER\r\n};\r\n\r\nexport const userReducer = produce((draft: Draft<UserState>, action: UserActions) => {\r\n    switch (action.type) {\r\n        case UserActionsType.SET_USER_DATA:\r\n            draft.data = action.payload;\r\n            draft.status = LoadingStatus.SUCCESS;\r\n            break;\r\n        case UserActionsType.SET_LOADING_STATE:\r\n            draft.status = action.payload;\r\n            break;\r\n    }\r\n}, initialState)","import {combineReducers} from 'redux';\r\nimport {tweetsReducer} from './ducks/tweets/reducer';\r\nimport {tagsReducer} from './ducks/tags/reducer';\r\nimport {tweetReducer} from './ducks/tweet/reducer';\r\nimport {userReducer} from './ducks/user/reducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n    tweets: tweetsReducer,\r\n    tags: tagsReducer,\r\n    tweet: tweetReducer,\r\n    user: userReducer,\r\n});","import {Tweet} from '../../store/ducks/tweets/contracts/state';\r\nimport {axios} from '../../core/axios';\r\n\r\ninterface Response<T> {\r\n    status: string,\r\n    data: T\r\n}\r\n\r\nexport const TweetsApi = {\r\n    async fetchTweets(): Promise<Tweet[]> {\r\n        const {data} = await axios.get<Response<Tweet[]>>('/tweets');\r\n        return data.data;\r\n    },\r\n    async fetchTweetsData(id: string): Promise<Tweet> {\r\n        const {data} = await axios.get<Response<Tweet>>('/tweets/' + id);\r\n        return data.data;\r\n    },\r\n    async addTweet(payload: string): Promise<Tweet> {\r\n        const {data} = await axios.post<Response<Tweet>>('/tweets', {text: payload});\r\n        return data.data;\r\n    }\r\n};","import {call, put, takeLatest} from 'redux-saga/effects';\r\nimport {TweetsApi} from '../../../services/api/tweetsApi';\r\nimport {addTweet, setAddFormState, setTweets, setTweetsLoadingState,} from './actionCreators';\r\nimport {AddFormState} from './contracts/state';\r\nimport {FetchAddTweetActionInterface, TweetsActionsType} from './contracts/actionTypes';\r\nimport {LoadingStatus} from '../../types';\r\n\r\nexport function* fetchTweetsRequest() {\r\n    try {\r\n        const items = yield call(TweetsApi.fetchTweets);\r\n        yield put(setTweets(items))\r\n    } catch (error) {\r\n        yield put(setTweetsLoadingState(LoadingStatus.ERROR));\r\n    }\r\n}\r\nexport function* fetchAddTweetRequest({ payload: text }: FetchAddTweetActionInterface) {\r\n    try {\r\n        const item = yield call(TweetsApi.addTweet, text);\r\n        yield put(addTweet(item))\r\n    } catch (error) {\r\n        yield put(setAddFormState(AddFormState.ERROR));\r\n    }\r\n}\r\n\r\nexport function* tweetsSaga() {\r\n    yield takeLatest(TweetsActionsType.FETCH_TWEETS, fetchTweetsRequest);\r\n    yield takeLatest(TweetsActionsType.FETCH_ADD_TWEET, fetchAddTweetRequest);\r\n}","import axios from 'axios';\r\nimport {TagsState} from '../../store/ducks/tags/contracts/state';\r\n\r\nexport const TagsApi = {\r\n    fetchTags(): Promise<TagsState['items']> {\r\n        return axios.get('/tags').then(({ data}) => data);\r\n    },\r\n}","import {call, put, takeLatest} from 'redux-saga/effects';\r\nimport {TagsApi} from '../../../services/api/tagsApi';\r\nimport {setTags, setTagsLoadingState, TagsActionsType} from './actionCreators';\r\nimport {LoadingStatus} from '../../types';\r\n\r\nexport function* fetchTagsRequest() {\r\n    try {\r\n        const items = yield call(TagsApi.fetchTags);\r\n        yield put(setTags(items))\r\n    } catch (error) {\r\n        yield put(setTagsLoadingState(LoadingStatus.ERROR));\r\n    }\r\n}\r\n\r\nexport function* tagsSaga() {\r\n    yield takeLatest(TagsActionsType.FETCH_TAGS, fetchTagsRequest)\r\n}","import {call, put, takeLatest} from 'redux-saga/effects';\r\nimport {TagsApi} from '../../../services/api/tagsApi';\r\nimport {FetchTagsActionInterface} from '../tags/actionCreators';\r\nimport {setTweet, setTweetLoadingState} from './actionCreators';\r\nimport {FetchTweetDataActionInterface, TweetActionsType} from './contracts/actionTypes';\r\nimport {TweetsApi} from '../../../services/api/tweetsApi';\r\nimport {Tweet} from '../tweets/contracts/state';\r\nimport {LoadingStatus} from '../../types';\r\n\r\nexport function* fetchTweetDataRequest({ payload: tweetId}: FetchTweetDataActionInterface) {\r\n    try {\r\n        const data: Tweet = yield call(TweetsApi.fetchTweetsData, tweetId);\r\n        yield put(setTweet(data));\r\n    } catch (error) {\r\n        yield put(setTweetLoadingState(LoadingStatus.ERROR));\r\n    }\r\n}\r\n\r\nexport function* tweetSaga() {\r\n    yield takeLatest(TweetActionsType.FETCH_TWEET_DATA, fetchTweetDataRequest)\r\n}","import {call, put, takeLatest} from 'redux-saga/effects';\r\nimport {TweetsApi} from '../../../services/api/tweetsApi';\r\nimport {FetchUserDataActionInterface, UserActionsType} from './contracts/actionTypes';\r\nimport {AuthApi} from '../../../services/api/authApi';\r\nimport {setLoadingStatus, setUserData} from './actionCreators';\r\nimport {LoadingStatus} from '../../types';\r\n\r\nexport function* fetchSignInRequest({payload}: FetchUserDataActionInterface) {\r\n    try {\r\n        const {data} = yield call(AuthApi.signIn, payload);\r\n        window.localStorage.setItem('token', data.token);\r\n        yield put(setUserData(data));\r\n    } catch (error) {\r\n        yield put(setLoadingStatus(LoadingStatus.ERROR));\r\n    }\r\n}\r\n\r\nexport function* userSaga() {\r\n    yield takeLatest(UserActionsType.FETCH_SIGN_IN, fetchSignInRequest);\r\n}","import {all} from 'redux-saga/effects';\r\nimport {tweetsSaga} from './ducks/tweets/sagas';\r\nimport {tagsSaga} from './ducks/tags/sagas';\r\nimport {tweetSaga} from './ducks/tweet/sagas';\r\nimport {userSaga} from './ducks/user/sagas';\r\n\r\nexport function* rootSaga() {\r\n    yield all([tweetsSaga(), tagsSaga(), tweetSaga(), userSaga()]);\r\n}","import {applyMiddleware, compose, createStore} from 'redux';\r\nimport {rootReducer} from './rootReducer';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport {rootSaga} from './saga';\r\nimport {TweetsState} from './ducks/tweets/contracts/state';\r\nimport {TagsState} from './ducks/tags/contracts/state';\r\nimport {TweetState} from './ducks/tweet/contracts/state';\r\nimport {UserState} from './ducks/user/contracts/state';\r\n\r\ndeclare global {\r\n    interface Window {\r\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n    }\r\n}\r\n\r\nconst composeEnhancers = (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nexport interface RootState {\r\n    tweets: TweetsState,\r\n    tags: TagsState,\r\n    tweet: TweetState,\r\n    user: UserState\r\n}\r\n\r\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(sagaMiddleware)));\r\n\r\nsagaMiddleware.run(rootSaga)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {ThemeProvider} from '@material-ui/core';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport {Provider} from 'react-redux';\n\nimport App from './App';\nimport './index.css';\nimport {theme} from './theme';\nimport {store} from './store/store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <ThemeProvider theme={theme}>\n            <CssBaseline/>\n            <Router>\n                <App/>\n            </Router>\n        </ThemeProvider>\n    </Provider>,\n    document.getElementById('root')\n);"],"sourceRoot":""}