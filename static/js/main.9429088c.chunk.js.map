{"version":3,"sources":["App.tsx","store/ducks/tweets/contracts/state.ts","theme.ts","store/ducks/tweets/contracts/actionTypes.ts","store/types.ts","store/ducks/tweets/reducer.ts","store/ducks/tags/actionCreators.ts","store/ducks/tweet/contracts/actionTypes.ts","store/ducks/tags/reducer.ts","store/ducks/tweet/reducer.ts","store/ducks/user/contracts/actionTypes.ts","store/ducks/user/reducer.ts","store/rootReducer.ts","core/axios.ts","services/api/tweetsApi.ts","store/ducks/tweets/actionCreators.ts","store/ducks/tweets/sagas.ts","services/api/tagsApi.ts","store/ducks/tags/sagas.ts","store/ducks/tweet/actionCreators.ts","store/ducks/tweet/sagas.ts","services/api/authApi.ts","store/ducks/user/actionCreators.ts","store/ducks/user/sagas.ts","store/saga.ts","store/store.ts","index.tsx"],"names":["App","AddFormState","className","theme","createMuiTheme","typography","fontFamily","palette","primary","main","dark","contrastText","secondary","error","red","A400","background","default","text","shadows","overrides","MuiButton","root","borderRadius","textTransform","fontSize","height","fontWeight","textPrimary","paddingLeft","paddingRight","MuiFilledInput","underline","borderBottomWidth","borderColor","input","MuiDialog","paper","borderRaduis","MuiDialogActions","mardinBottom","MuiDialogTitle","borderBottom","marginBottom","padding","display","alignItems","marginRight","TweetsActionsType","LoadingStatus","TagsActionsType","initialState","items","addFormState","NEVER","loadingState","tweetsReducer","produce","draft","action","type","SET_TWEETS","payload","LOADED","ADD_TWEET","splice","FETCH_ADD_TWEET","LOADING","FETCH_TWEETS","SET_LOADING_STATE","SET_ADD_FORM_STATE","TweetActionsType","setTagsLoadingState","tagsReducer","SET_TAGS","FETCH_TAGS","UserActionsType","data","undefined","tweetReducer","SET_TWEET_DATA","FETCH_TWEET_DATA","status","userReducer","SET_USER_DATA","SUCCESS","rootReducer","combineReducers","tweets","tags","tweet","user","axios","interceptors","request","use","config","headers","window","localStorage","getItem","TweetsApi","get","id","post","setTweetsLoadingState","setAddFormState","fetchTweetsRequest","fetchAddTweetRequest","tweetsSaga","call","put","ERROR","item","takeLatest","TagsApi","then","fetchTagsRequest","tagsSaga","setTweetLoadingState","fetchTweetDataRequest","tweetSaga","tweetId","AuthApi","postData","username","email","password","setUserData","setLoadingStatus","fetchSignInRequest","userSaga","setItem","token","FETCH_SIGN_IN","rootSaga","all","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","ReactDOM","render","ThemeProvider","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.9429088c.chunk.js","sourcesContent":["import React, {useEffect} from 'react';\nimport {Authorize} from './pages/SignIn';\nimport { Route, Switch, useHistory } from 'react-router-dom';\nimport Home from './pages/Home/Home';\nimport {useDispatch} from 'react-redux';\nimport {AuthApi} from './services/api/authApi';\nimport {setUserData} from './store/ducks/user/actionCreators';\n\nfunction App() {\n    // const history = useHistory();\n    // const dispatch = useDispatch();\n    //\n    // const checkAuth = async () => {\n    //     try {\n    //         const {data} = await AuthApi.getMe();\n    //         dispatch(setUserData(data));\n    //         history.replace('/home');\n    //     } catch (err) {\n    //         console.log(err);\n    //     }\n    // }\n\n    // useEffect(() => {\n    //     checkAuth();\n    // }, [])\n\n  return (\n    <div className=\"App\">\n        <b>TEST</b>\n        {/*<Switch>*/}\n        {/*    <Route path='/signIn' component={Authorize}/>*/}\n        {/*    <Route path='/' component={Home}/>*/}\n        {/*</Switch>*/}\n    </div>\n  );\n}\n\nexport default App;\n","import {LoadingStatus} from '../../../types';\r\n\r\nexport enum AddFormState {\r\n    LOADING = 'LOADING',\r\n    ERROR = 'ERROR',\r\n    NEVER = 'NEVER',\r\n}\r\n\r\nexport interface Tweet {\r\n    _id: string,\r\n    createdAt: string,\r\n    user: {\r\n        fullname: string,\r\n        username: string,\r\n        avatarUrl: string,\r\n    },\r\n    text: string,\r\n}\r\n\r\nexport interface TweetsState {\r\n    items: Tweet[];\r\n    loadingState: LoadingStatus;\r\n    addFormState: AddFormState;\r\n}","// @ts-nocheck\r\n\r\nimport {createMuiTheme} from '@material-ui/core';\r\nimport { red } from '@material-ui/core/colors'\r\n\r\nexport const theme = createMuiTheme({\r\n    typography: {\r\n        fontFamily: [\r\n            'system-ui',\r\n            '-apple-system',\r\n            'BlinkMacSystemFont',\r\n            'Segoe UI',\r\n            'Roboto',\r\n            'Oxygen',\r\n            'Ubuntu',\r\n            'Cantarell',\r\n            'Fira Sans',\r\n            'Droid Sans',\r\n            'Helvetica Neue',\r\n            'sans-serif',\r\n        ]\r\n    },\r\n    palette: {\r\n        primary: {\r\n            main: 'rgb(29, 161, 242)',\r\n            dark: 'rgb(26, 145, 218)',\r\n            contrastText: '#fff',\r\n        },\r\n        secondary: {\r\n            main: 'rgb(26, 145, 218)',\r\n        },\r\n        error: {\r\n            main: red.A400,\r\n        },\r\n        background: {\r\n            default: '#fff',\r\n        },\r\n        text: {\r\n            primary: '#14171a',\r\n        }\r\n    },\r\n    shadows: [],\r\n    overrides: {\r\n        MuiButton: {\r\n            root: {\r\n                borderRadius: 30,\r\n                textTransform: 'none',\r\n                fontSize: 16,\r\n                height: 40,\r\n                fontWeight: 700,\r\n            },\r\n            textPrimary: {\r\n                paddingLeft: 20,\r\n                paddingRight: 20,\r\n            },\r\n            MuiFilledInput: {\r\n                underline: {\r\n                    '&:after': {\r\n                        borderBottomWidth: '2px',\r\n                    },\r\n                    '&:before': {\r\n                        borderColor: '#000',\r\n                        borderBottomWidth: '2px',\r\n                    },\r\n                },\r\n                input: {\r\n                    background: 'rgb(245, 248, 250)'\r\n                },\r\n                MuiDialog: {\r\n                    paper: {\r\n                        borderRaduis: 15,\r\n                    },\r\n                },\r\n                MuiDialogActions: {\r\n                    root: {\r\n                        mardinBottom: 8,\r\n                    },\r\n                },\r\n                MuiDialogTitle: {\r\n                    root: {\r\n                        borderBottom: '1px solid rgb(204, 230, 240)',\r\n                        marginBottom: 10,\r\n                        padding: '10px 15px', '& h2': {\r\n                            display: 'flex',\r\n                            alignItems: 'center',\r\n                            fontWeight: 800,\r\n                        },\r\n                        '& button': {\r\n                            padding: 8,\r\n                            marginRight: 20,\r\n                        },\r\n                    },\r\n                },\r\n            }\r\n        }\r\n    }\r\n});","import {Action} from 'redux';\r\nimport {AddFormState, Tweet, TweetsState} from './state';\r\nimport {LoadingStatus} from '../../../types';\r\n\r\nexport enum TweetsActionsType {\r\n    SET_TWEETS = 'tweets/SET_TWEETS',\r\n    ADD_TWEET = 'tweets/ADD_TWEET',\r\n    FETCH_ADD_TWEET = 'tweets/FETCH_ADD_TWEET',\r\n    FETCH_TWEETS = 'tweets/FETCH_TWEETS',\r\n    SET_LOADING_STATE = 'tweets/SET_LOADING_STATE',\r\n    SET_ADD_FORM_STATE = 'tweets/SET_ADD_FORM_STATE',\r\n}\r\n\r\nexport interface SetTweetsActionInterface extends Action<TweetsActionsType> {\r\n    type: TweetsActionsType.SET_TWEETS;\r\n    payload: TweetsState['items'];\r\n}\r\nexport interface AddTweetActionInterface extends Action<TweetsActionsType> {\r\n    type: TweetsActionsType.ADD_TWEET;\r\n    payload: Tweet;\r\n}\r\nexport interface FetchAddTweetActionInterface extends Action<TweetsActionsType> {\r\n    type: TweetsActionsType.FETCH_ADD_TWEET;\r\n    payload: string;\r\n}\r\nexport interface FetchTweetsActionInterface extends Action<TweetsActionsType> {\r\n    type: TweetsActionsType.FETCH_TWEETS;\r\n}\r\nexport interface setTweetsLoadingStateActionInterface extends Action<TweetsActionsType> {\r\n    type: TweetsActionsType.SET_LOADING_STATE;\r\n    payload: LoadingStatus;\r\n}\r\nexport interface setAddFormStateActionInterface extends Action<TweetsActionsType> {\r\n    type: TweetsActionsType.SET_ADD_FORM_STATE;\r\n    payload: AddFormState;\r\n}","\r\nexport enum LoadingStatus {\r\n    LOADED = 'LOADED',\r\n    LOADING = 'LOADING',\r\n    ERROR = 'ERROR',\r\n    NEVER = 'NEVER',\r\n    SUCCESS = 'SUCCESS',\r\n}","import {AddFormState, TweetsState} from './contracts/state';\r\nimport produce, {Draft} from 'immer';\r\nimport {TweetsActions} from './actionCreators';\r\nimport {TweetsActionsType} from './contracts/actionTypes';\r\nimport {LoadingStatus} from '../../types';\r\n\r\nconst initialState: TweetsState = {\r\n    items: [],\r\n    addFormState: AddFormState.NEVER,\r\n    loadingState: LoadingStatus.NEVER,\r\n};\r\n\r\nexport const tweetsReducer = produce((draft: Draft<TweetsState>, action: TweetsActions) => {\r\n    switch (action.type) {\r\n        case TweetsActionsType.SET_TWEETS:\r\n            draft.items = action.payload;\r\n            draft.loadingState = LoadingStatus.LOADED;\r\n            break;\r\n        case TweetsActionsType.ADD_TWEET:\r\n            // draft.items.push(action.payload);\r\n            draft.items.splice(0, 0, action.payload);\r\n            draft.addFormState = AddFormState.NEVER;\r\n            break;\r\n        case TweetsActionsType.FETCH_ADD_TWEET:\r\n            draft.addFormState = AddFormState.LOADING;\r\n            break;\r\n        case TweetsActionsType.FETCH_TWEETS:\r\n            draft.items = [];\r\n            draft.loadingState = LoadingStatus.LOADING;\r\n            break;\r\n        case TweetsActionsType.SET_LOADING_STATE:\r\n            draft.loadingState = action.payload;\r\n            break;\r\n        case TweetsActionsType.SET_ADD_FORM_STATE:\r\n            draft.addFormState = action.payload;\r\n            break;\r\n\r\n    }\r\n}, initialState)","import {TagsState} from './contracts/state';\r\nimport {Action} from 'redux';\r\nimport {LoadingStatus} from '../../types';\r\n\r\nexport enum TagsActionsType {\r\n    SET_TAGS = 'tags/SET_TAGS',\r\n    FETCH_TAGS = 'tags/FETCH_TAGS',\r\n    SET_LOADING_STATE = 'tags/SET_LOADING_STATE',\r\n}\r\n\r\nexport interface SetTagsActionInterface extends Action<TagsActionsType> {\r\n    type: TagsActionsType.SET_TAGS;\r\n    payload: TagsState['items'];\r\n}\r\n\r\nexport interface setTagsLoadingStateActionInterface extends Action<TagsActionsType> {\r\n    type: TagsActionsType.SET_LOADING_STATE;\r\n    payload: LoadingStatus;\r\n}\r\n\r\nexport interface FetchTagsActionInterface extends Action<TagsActionsType> {\r\n    type: TagsActionsType.FETCH_TAGS;\r\n}\r\n\r\nexport const setTags = (payload: TagsState['items']): SetTagsActionInterface => ({\r\n    type: TagsActionsType.SET_TAGS,\r\n    payload\r\n});\r\nexport const setTagsLoadingState = (payload: LoadingStatus): setTagsLoadingStateActionInterface => ({\r\n    type: TagsActionsType.SET_LOADING_STATE,\r\n    payload\r\n});\r\nexport const fetchTags = (): FetchTagsActionInterface => ({\r\n    type: TagsActionsType.FETCH_TAGS\r\n});\r\n\r\nexport type TagsActions =\r\n    SetTagsActionInterface\r\n    | setTagsLoadingStateActionInterface\r\n    | FetchTagsActionInterface;","import {Action} from 'redux';\r\nimport {Tweet} from '../../tweets/contracts/state';\r\nimport {TweetState} from './state';\r\nimport {LoadingStatus} from '../../../types';\r\n\r\nexport enum TweetActionsType {\r\n    SET_TWEET_DATA = 'tweet/SET_DATA',\r\n    FETCH_TWEET_DATA = 'tweet/FETCH_DATA',\r\n    SET_LOADING_STATE = 'tweet/SET_LOADING_STATE',\r\n}\r\nexport interface SetTweetActionInterface extends Action<TweetActionsType> {\r\n    type: TweetActionsType.SET_TWEET_DATA;\r\n    payload: TweetState['data'];\r\n}\r\nexport interface setTweetLoadingStateActionInterface extends Action<TweetActionsType> {\r\n    type: TweetActionsType.SET_LOADING_STATE;\r\n    payload: LoadingStatus;\r\n}\r\nexport interface FetchTweetDataActionInterface extends Action<TweetActionsType> {\r\n    type: TweetActionsType.FETCH_TWEET_DATA;\r\n    payload: string;\r\n}\r\n","import {TagsState} from './contracts/state';\r\nimport produce, {Draft} from 'immer';\r\nimport {TagsActions, TagsActionsType} from './actionCreators';\r\nimport {LoadingStatus} from '../../types';\r\n\r\nconst initialState: TagsState = {\r\n    items: [],\r\n    loadingState: LoadingStatus.NEVER\r\n};\r\n\r\nexport const tagsReducer = produce((draft: Draft<TagsState>, action: TagsActions) => {\r\n    switch (action.type) {\r\n        case TagsActionsType.SET_TAGS:\r\n            draft.items = action.payload;\r\n            draft.loadingState = LoadingStatus.LOADED;\r\n            break;\r\n        case TagsActionsType.FETCH_TAGS:\r\n            draft.items = [];\r\n            draft.loadingState = LoadingStatus.LOADING;\r\n            break;\r\n        case TagsActionsType.SET_LOADING_STATE:\r\n            draft.loadingState = action.payload;\r\n            break;\r\n    }\r\n}, initialState)","import {TweetState} from './contracts/state';\r\nimport produce, {Draft} from 'immer';\r\nimport {TweetActions} from './actionCreators';\r\nimport {TweetActionsType} from './contracts/actionTypes';\r\nimport {LoadingStatus} from '../../types';\r\n\r\nconst initialState: TweetState = {\r\n    data: undefined,\r\n    loadingState: LoadingStatus.NEVER\r\n};\r\n\r\nexport const tweetReducer = produce((draft: Draft<TweetState>, action: TweetActions) => {\r\n    switch (action.type) {\r\n        case TweetActionsType.SET_TWEET_DATA:\r\n            draft.data = action.payload;\r\n            draft.loadingState = LoadingStatus.LOADED;\r\n            break;\r\n        case TweetActionsType.FETCH_TWEET_DATA:\r\n            draft.data = undefined;\r\n            draft.loadingState = LoadingStatus.LOADING;\r\n            break;\r\n        case TweetActionsType.SET_LOADING_STATE:\r\n            draft.loadingState = action.payload;\r\n            break;\r\n    }\r\n}, initialState)","import {Action} from 'redux';\r\nimport {User, UserState} from './state';\r\nimport {LoginFormProps} from '../../../../pages/SignIn/components/LoginModal';\r\nimport {LoadingStatus} from '../../../types';\r\n\r\nexport enum UserActionsType {\r\n    SET_USER_DATA = 'user/SET_USER_DATA',\r\n    SET_LOADING_STATE = 'user/SET_LOADING_STATE',\r\n    FETCH_SIGN_IN = 'user/FETCH_SIGN_IN',\r\n}\r\n\r\nexport interface SetUserDataActionInterface extends Action<UserActionsType> {\r\n    type: UserActionsType.SET_USER_DATA;\r\n    payload: User | undefined;\r\n}\r\nexport interface SetUserLoadingStateActionInterface extends Action<UserActionsType> {\r\n    type: UserActionsType.SET_LOADING_STATE;\r\n    payload: LoadingStatus;\r\n}\r\nexport interface FetchUserDataActionInterface extends Action<UserActionsType> {\r\n    type: UserActionsType.FETCH_SIGN_IN;\r\n    payload: LoginFormProps\r\n}","import { UserState} from './contracts/state';\r\nimport produce, {Draft} from 'immer';\r\nimport {UserActions} from './actionCreators';\r\nimport {UserActionsType} from './contracts/actionTypes';\r\nimport {LoadingStatus} from '../../types';\r\n\r\nconst initialState: UserState = {\r\n    data: undefined,\r\n    status: LoadingStatus.NEVER\r\n};\r\n\r\nexport const userReducer = produce((draft: Draft<UserState>, action: UserActions) => {\r\n    switch (action.type) {\r\n        case UserActionsType.SET_USER_DATA:\r\n            draft.data = action.payload;\r\n            draft.status = LoadingStatus.SUCCESS;\r\n            break;\r\n        case UserActionsType.SET_LOADING_STATE:\r\n            draft.status = action.payload;\r\n            break;\r\n    }\r\n}, initialState)","import {combineReducers} from 'redux';\r\nimport {tweetsReducer} from './ducks/tweets/reducer';\r\nimport {tagsReducer} from './ducks/tags/reducer';\r\nimport {tweetReducer} from './ducks/tweet/reducer';\r\nimport {userReducer} from './ducks/user/reducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n    tweets: tweetsReducer,\r\n    tags: tagsReducer,\r\n    tweet: tweetReducer,\r\n    user: userReducer,\r\n});","import axios from 'axios';\r\n\r\naxios.interceptors.request.use((config) => {\r\n    config.headers['token'] = window.localStorage.getItem('token');\r\n    return config;\r\n})\r\n\r\nexport {axios};","import {Tweet} from '../../store/ducks/tweets/contracts/state';\r\nimport {axios} from '../../core/axios';\r\n\r\ninterface Response<T> {\r\n    status: string,\r\n    data: T\r\n}\r\n\r\nexport const TweetsApi = {\r\n    async fetchTweets(): Promise<Tweet[]> {\r\n        const {data} = await axios.get<Response<Tweet[]>>('/tweets');\r\n        return data.data;\r\n    },\r\n    async fetchTweetsData(id: string): Promise<Tweet> {\r\n        const {data} = await axios.get<Response<Tweet>>('/tweets/' + id);\r\n        return data.data;\r\n    },\r\n    async addTweet(payload: string): Promise<Tweet> {\r\n        const {data} = await axios.post<Response<Tweet>>('/tweets', {text: payload});\r\n        return data.data;\r\n    }\r\n};","import {AddFormState, Tweet, TweetsState} from './contracts/state';\r\nimport {Action} from 'redux';\r\nimport {\r\n    AddTweetActionInterface,\r\n    FetchAddTweetActionInterface, FetchTweetsActionInterface, setAddFormStateActionInterface,\r\n    SetTweetsActionInterface, setTweetsLoadingStateActionInterface,\r\n    TweetsActionsType\r\n} from './contracts/actionTypes';\r\nimport {LoadingStatus} from '../../types';\r\n\r\nexport const setTweets = (payload: TweetsState['items']): SetTweetsActionInterface => ({\r\n    type: TweetsActionsType.SET_TWEETS,\r\n    payload\r\n});\r\nexport const addTweet = (payload: Tweet): AddTweetActionInterface => ({\r\n    type: TweetsActionsType.ADD_TWEET,\r\n    payload\r\n});\r\nexport const fetchAddTweet = (payload: string): FetchAddTweetActionInterface => ({\r\n    type: TweetsActionsType.FETCH_ADD_TWEET,\r\n    payload\r\n});\r\nexport const fetchTweets = (): FetchTweetsActionInterface => ({\r\n    type: TweetsActionsType.FETCH_TWEETS\r\n});\r\nexport const setTweetsLoadingState = (payload: LoadingStatus): setTweetsLoadingStateActionInterface => ({\r\n    type: TweetsActionsType.SET_LOADING_STATE,\r\n    payload\r\n});\r\nexport const setAddFormState = (payload: AddFormState): setAddFormStateActionInterface => ({\r\n    type: TweetsActionsType.SET_ADD_FORM_STATE,\r\n    payload\r\n});\r\n\r\nexport type TweetsActions =\r\n    SetTweetsActionInterface\r\n    | AddTweetActionInterface\r\n    | FetchAddTweetActionInterface\r\n    | setTweetsLoadingStateActionInterface\r\n    | setAddFormStateActionInterface\r\n    | FetchTweetsActionInterface;","import {call, put, takeLatest} from 'redux-saga/effects';\r\nimport {TweetsApi} from '../../../services/api/tweetsApi';\r\nimport {addTweet, setAddFormState, setTweets, setTweetsLoadingState,} from './actionCreators';\r\nimport {AddFormState} from './contracts/state';\r\nimport {FetchAddTweetActionInterface, TweetsActionsType} from './contracts/actionTypes';\r\nimport {LoadingStatus} from '../../types';\r\n\r\nexport function* fetchTweetsRequest() {\r\n    try {\r\n        const items = yield call(TweetsApi.fetchTweets);\r\n        yield put(setTweets(items))\r\n    } catch (error) {\r\n        yield put(setTweetsLoadingState(LoadingStatus.ERROR));\r\n    }\r\n}\r\nexport function* fetchAddTweetRequest({ payload: text }: FetchAddTweetActionInterface) {\r\n    try {\r\n        const item = yield call(TweetsApi.addTweet, text);\r\n        yield put(addTweet(item))\r\n    } catch (error) {\r\n        yield put(setAddFormState(AddFormState.ERROR));\r\n    }\r\n}\r\n\r\nexport function* tweetsSaga() {\r\n    yield takeLatest(TweetsActionsType.FETCH_TWEETS, fetchTweetsRequest);\r\n    yield takeLatest(TweetsActionsType.FETCH_ADD_TWEET, fetchAddTweetRequest);\r\n}","import axios from 'axios';\r\nimport {TagsState} from '../../store/ducks/tags/contracts/state';\r\n\r\nexport const TagsApi = {\r\n    fetchTags(): Promise<TagsState['items']> {\r\n        return axios.get('/tags').then(({ data}) => data);\r\n    },\r\n}","import {call, put, takeLatest} from 'redux-saga/effects';\r\nimport {TagsApi} from '../../../services/api/tagsApi';\r\nimport {setTags, setTagsLoadingState, TagsActionsType} from './actionCreators';\r\nimport {LoadingStatus} from '../../types';\r\n\r\nexport function* fetchTagsRequest() {\r\n    try {\r\n        const items = yield call(TagsApi.fetchTags);\r\n        yield put(setTags(items))\r\n    } catch (error) {\r\n        yield put(setTagsLoadingState(LoadingStatus.ERROR));\r\n    }\r\n}\r\n\r\nexport function* tagsSaga() {\r\n    yield takeLatest(TagsActionsType.FETCH_TAGS, fetchTagsRequest)\r\n}","import {TweetState} from './contracts/state';\r\nimport {Tweet} from '../tweets/contracts/state';\r\n\r\nimport {\r\n    FetchTweetDataActionInterface,\r\n    SetTweetActionInterface, setTweetLoadingStateActionInterface,\r\n    TweetActionsType\r\n} from './contracts/actionTypes';\r\nimport {LoadingStatus} from '../../types';\r\n\r\nexport const setTweet = (payload: TweetState['data']): SetTweetActionInterface => ({\r\n    type: TweetActionsType.SET_TWEET_DATA,\r\n    payload\r\n});\r\nexport const setTweetLoadingState = (payload: LoadingStatus): setTweetLoadingStateActionInterface => ({\r\n    type: TweetActionsType.SET_LOADING_STATE,\r\n    payload\r\n});\r\nexport const fetchTweetData = (payload: string): FetchTweetDataActionInterface => ({\r\n    type: TweetActionsType.FETCH_TWEET_DATA,\r\n    payload\r\n});\r\n\r\nexport type TweetActions =\r\n    SetTweetActionInterface\r\n    | setTweetLoadingStateActionInterface\r\n    | FetchTweetDataActionInterface;","import {call, put, takeLatest} from 'redux-saga/effects';\r\nimport {TagsApi} from '../../../services/api/tagsApi';\r\nimport {FetchTagsActionInterface} from '../tags/actionCreators';\r\nimport {setTweet, setTweetLoadingState} from './actionCreators';\r\nimport {FetchTweetDataActionInterface, TweetActionsType} from './contracts/actionTypes';\r\nimport {TweetsApi} from '../../../services/api/tweetsApi';\r\nimport {Tweet} from '../tweets/contracts/state';\r\nimport {LoadingStatus} from '../../types';\r\n\r\nexport function* fetchTweetDataRequest({ payload: tweetId}: FetchTweetDataActionInterface) {\r\n    try {\r\n        const data: Tweet = yield call(TweetsApi.fetchTweetsData, tweetId);\r\n        yield put(setTweet(data));\r\n    } catch (error) {\r\n        yield put(setTweetLoadingState(LoadingStatus.ERROR));\r\n    }\r\n}\r\n\r\nexport function* tweetSaga() {\r\n    yield takeLatest(TweetActionsType.FETCH_TWEET_DATA, fetchTweetDataRequest)\r\n}","import {LoginFormProps} from '../../pages/SignIn/components/LoginModal';\r\nimport {axios} from '../../core/axios';\r\n\r\ninterface ResponseApi {\r\n    status: string,\r\n    data: any,\r\n}\r\n\r\nexport const AuthApi = {\r\n    async signIn(postData: LoginFormProps): Promise<ResponseApi> {\r\n        const {data} = await axios.post<ResponseApi>('/auth/login', {username: postData.email, password: postData.password});\r\n        return data;\r\n    },\r\n    async getMe(): Promise<ResponseApi> {\r\n        const {data} = await axios.get<ResponseApi>('/users/me');\r\n        return data;\r\n    },\r\n}","import {User, UserState} from './contracts/state';\r\nimport {\r\n    FetchUserDataActionInterface,\r\n    SetUserDataActionInterface,\r\n    SetUserLoadingStateActionInterface,\r\n    UserActionsType\r\n} from './contracts/actionTypes';\r\nimport {LoginFormProps} from '../../../pages/SignIn/components/LoginModal';\r\n\r\nexport const setUserData = (payload: UserState['data']): SetUserDataActionInterface => ({\r\n    type: UserActionsType.SET_USER_DATA,\r\n    payload\r\n});\r\nexport const setLoadingStatus = (payload: UserState['status']): SetUserLoadingStateActionInterface => ({\r\n    type: UserActionsType.SET_LOADING_STATE,\r\n    payload\r\n});\r\nexport const fetchSignIn = (payload: LoginFormProps): FetchUserDataActionInterface => ({\r\n    type: UserActionsType.FETCH_SIGN_IN,\r\n    payload\r\n});\r\n\r\nexport type UserActions =\r\n    SetUserDataActionInterface\r\n    | SetUserLoadingStateActionInterface","import {call, put, takeLatest} from 'redux-saga/effects';\r\nimport {TweetsApi} from '../../../services/api/tweetsApi';\r\nimport {FetchUserDataActionInterface, UserActionsType} from './contracts/actionTypes';\r\nimport {AuthApi} from '../../../services/api/authApi';\r\nimport {setLoadingStatus, setUserData} from './actionCreators';\r\nimport {LoadingStatus} from '../../types';\r\n\r\nexport function* fetchSignInRequest({payload}: FetchUserDataActionInterface) {\r\n    try {\r\n        const {data} = yield call(AuthApi.signIn, payload);\r\n        window.localStorage.setItem('token', data.token);\r\n        yield put(setUserData(data));\r\n    } catch (error) {\r\n        yield put(setLoadingStatus(LoadingStatus.ERROR));\r\n    }\r\n}\r\n\r\nexport function* userSaga() {\r\n    yield takeLatest(UserActionsType.FETCH_SIGN_IN, fetchSignInRequest);\r\n}","import {all} from 'redux-saga/effects';\r\nimport {tweetsSaga} from './ducks/tweets/sagas';\r\nimport {tagsSaga} from './ducks/tags/sagas';\r\nimport {tweetSaga} from './ducks/tweet/sagas';\r\nimport {userSaga} from './ducks/user/sagas';\r\n\r\nexport function* rootSaga() {\r\n    yield all([tweetsSaga(), tagsSaga(), tweetSaga(), userSaga()]);\r\n}","import {applyMiddleware, compose, createStore} from 'redux';\r\nimport {rootReducer} from './rootReducer';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport {rootSaga} from './saga';\r\nimport {TweetsState} from './ducks/tweets/contracts/state';\r\nimport {TagsState} from './ducks/tags/contracts/state';\r\nimport {TweetState} from './ducks/tweet/contracts/state';\r\nimport {UserState} from './ducks/user/contracts/state';\r\n\r\ndeclare global {\r\n    interface Window {\r\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n    }\r\n}\r\n\r\nconst composeEnhancers = (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nexport interface RootState {\r\n    tweets: TweetsState,\r\n    tags: TagsState,\r\n    tweet: TweetState,\r\n    user: UserState\r\n}\r\n\r\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(sagaMiddleware)));\r\n\r\nsagaMiddleware.run(rootSaga)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {ThemeProvider} from '@material-ui/core';\nimport {BrowserRouter} from 'react-router-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport {Provider} from 'react-redux';\n\nimport App from './App';\nimport './index.css';\nimport {theme} from './theme';\nimport {store} from './store/store';\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <ThemeProvider theme={theme}>\n                <CssBaseline/>\n                <App/>\n            </ThemeProvider>\n        </Provider>\n    </BrowserRouter>,\n    document.getElementById('root')\n);"],"sourceRoot":""}